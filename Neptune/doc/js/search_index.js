var search_data = {"index":{"searchIndex":["appcontrollerclient","badconfigurationexception","datastore","datastorefactory","datastorerepo","datastorerepoonappengine","datastorerepoonappscale","datastores3","datastorewazstorage","djinnjobdata","enginefactory","failedzookeeperoperationexception","googleappenginepullqueue","googleappenginepushqueue","helperfunctions","infrastructuremanagerclient","jsonclient","neptunejobdata","neptunemanager","neptunemanagerclient","neptunemanagerserver","object","queuefactory","taskengine","taskengineappscale","taskenginegoogleappengine","taskqueue","taskqueueazurequeue","taskqueuegoogleappengine","taskqueuerabbitmq","taskqueuesqs","userappclient","zkinterface","zookeeperlockexception","acquire_nodes()","acquire_nodes_for_cloud()","add_app_entry()","add_app_instance()","add_instance()","add_ip_to_ip_list()","add_metadata_to_job()","add_nodes()","add_role()","add_roles()","add_roles_and_wait()","add_roles_to_node()","add_timing_info()","app_needs_uploading?()","app_needs_uploading?()","app_needs_uploading?()","appscale_run_job()","babel_run_job()","build_app_via_oration()","can_run_job()","can_run_jobs_in_parallel?()","change_password()","cicero_run_job()","cleanup()","cleanup_code()","commit_new_app()","commit_new_app_name()","commit_new_user()","commit_tar()","compile_code()","convert_location_array_to_class()","convert_location_class_to_array()","copy_code_and_inputs_to_dir()","copy_code_to_dir()","copy_file_to_dir()","copy_from_shadow()","copy_inputs_to_dir()","cost()","create_temp_dir()","delete_app()","delete_instance()","describe_instances()","deserialize()","dispatch_jobs()","do_http_get_for_get()","do_http_post_for_set()","does_app_exist?()","does_file_exist()","does_file_exist?()","does_file_exist?()","does_file_exist?()","does_user_exist?()","engine_name()","engine_name()","engine_name()","execute_multiple_tasks()","extend_time()","find_neighbors()","find_open_nodes()","find_open_nodes_in_cloud()","from_hash()","get_acl()","get_acl()","get_acl()","get_acl()","get_all_apps()","get_all_public_ips()","get_all_users()","get_app_data()","get_app_hosters()","get_app_instances_for_ip()","get_app_url()","get_app_url()","get_app_url()","get_appcontroller_lock()","get_appcontroller_state()","get_cert()","get_cloud_admin()","get_cloud_info()","get_creds()","get_creds()","get_creds()","get_creds()","get_datastore()","get_engine()","get_engines_for_creds()","get_failed_nodes()","get_hosts_for_app()","get_ip_info()","get_job_data()","get_job_data_for_ip()","get_job_name()","get_key()","get_length_of_all_queues()","get_lock_file_path()","get_max_machines_for_babel_slaves()","get_my_public_ip()","get_n_items_of_work()","get_node_roles()","get_node_with_role()","get_output()","get_output_and_return_contents()","get_output_and_return_contents()","get_output_and_return_contents()","get_output_and_return_contents()","get_output_and_save_to_fs()","get_output_and_save_to_fs()","get_output_and_save_to_fs()","get_output_and_save_to_fs()","get_output_with_file_list()","get_queue()","get_queues_from_shadow()","get_queues_in_use()","get_queues_in_use()","get_queues_in_use()","get_random_alphanumeric()","get_secret()","get_seed_vals()","get_single_file_and_save_to_fs()","get_stats()","get_status()","get_supported_babel_engines()","get_tar()","get_user_data()","get_userappserver_ip()","has_all_required_params?()","init()","init_to_ip()","initialize_zookeeper_connection()","is_app_running?()","is_app_uploaded?()","is_cloud?()","is_done_initializing?()","is_done_loading?()","is_hybrid_cloud?()","is_job_running()","is_node_done_loading?()","is_node_live?()","is_port_open?()","is_pull_queue_app_running?()","is_storage_location?()","is_user_cloud_admin?()","local_ip()","lock_and_run()","lock_file_exists?()","log()","make_call()","make_call()","make_call()","make_call()","manage_virtual_machines()","mapreduce_run_job()","method_missing()","mpi_run_job()","my_node()","neptune_parse_creds()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","on_init()","optimal_nodes()","optimal_nodes_hill_climbing()","parse_s3_key()","pop()","pop()","pop()","pop()","pop()","push()","push()","push()","push()","push()","push()","put_input()","read_file()","read_json_file()","reinitialize()","release_appcontroller_lock()","remove_app_entry()","remove_ip_from_ip_list()","remove_lock_file()","remove_node_information()","remove_role()","remove_roles()","remove_roles()","remove_roles_from_node()","run_code()","run_instances()","run_job_on_master()","run_jobs_in_parallel()","run_jobs_in_serial()","run_neptune_job()","run_neptune_job()","run_or_delegate_tasks()","run_remote_command()","run_task()","run_task()","run_via_engine()","run_via_executor()","s3_bucket_exists?()","save_output()","save_output_to_local_fs()","scp_file()","serialize()","set_acl()","set_acl()","set_acl()","set_acl()","set_apps()","set_done_loading()","set_job_data_for_ip()","set_live_node_ephemeral_link()","set_max_machines_for_babel_slaves()","set_parameters()","set_roles()","set_time_info()","shell()","should_destroy?()","should_extend?()","size()","size()","size()","size()","sleep_until_port_is_open()","spawn_babel_slaves()","spawn_nodes_for_neptune?()","spawn_vms()","start()","start_babel_master()","start_babel_slave()","start_job()","start_job_roles()","status()","stop_app()","stop_babel_master()","stop_babel_slave()","stop_job_roles()","terminate_instances()","to_hash()","to_hash()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","total_time()","touch_lock_file()","uncompress_file()","update()","update_ips_timestamp()","upload_app()","upload_app()","upload_app()","upload_app()","valid_secret?()","validate_environment()","wait_for_allotted_time()","wait_for_app_to_start_serving()","wait_for_node_to_be()","wait_for_task_to_finish()","write_appcontroller_state()","write_babel_outputs()","write_file()","write_job_output()","write_job_output_handler()","write_job_output_str()","write_json_file()","write_node_information()","write_remote_file_from_local_file()","write_remote_file_from_local_file()","write_remote_file_from_local_file()","write_remote_file_from_local_file()","write_remote_file_from_string()","write_remote_file_from_string()","write_remote_file_from_string()","write_remote_file_from_string()","write_remote_file_with_container()"],"longSearchIndex":["appcontrollerclient","badconfigurationexception","datastore","datastorefactory","datastorerepo","datastorerepoonappengine","datastorerepoonappscale","datastores3","datastorewazstorage","djinnjobdata","enginefactory","failedzookeeperoperationexception","googleappenginepullqueue","googleappenginepushqueue","helperfunctions","infrastructuremanagerclient","jsonclient","neptunejobdata","neptunemanager","neptunemanagerclient","neptunemanagerserver","object","queuefactory","taskengine","taskengineappscale","taskenginegoogleappengine","taskqueue","taskqueueazurequeue","taskqueuegoogleappengine","taskqueuerabbitmq","taskqueuesqs","userappclient","zkinterface","zookeeperlockexception","neptunemanager#acquire_nodes()","neptunemanager#acquire_nodes_for_cloud()","zkinterface::add_app_entry()","zkinterface::add_app_instance()","userappclient#add_instance()","zkinterface::add_ip_to_ip_list()","taskengine#add_metadata_to_job()","neptunemanager#add_nodes()","appcontrollerclient#add_role()","djinnjobdata#add_roles()","neptunemanager#add_roles_and_wait()","zkinterface::add_roles_to_node()","neptunemanager#add_timing_info()","taskengine#app_needs_uploading?()","taskengineappscale#app_needs_uploading?()","taskenginegoogleappengine#app_needs_uploading?()","neptunemanager#appscale_run_job()","neptunemanager#babel_run_job()","taskengine#build_app_via_oration()","neptunemanager#can_run_job()","neptunemanager#can_run_jobs_in_parallel?()","userappclient#change_password()","neptunemanager#cicero_run_job()","neptunemanager::cleanup()","neptunemanager#cleanup_code()","userappclient#commit_new_app()","userappclient#commit_new_app_name()","userappclient#commit_new_user()","userappclient#commit_tar()","neptunemanager#compile_code()","neptunemanager::convert_location_array_to_class()","neptunemanager::convert_location_class_to_array()","neptunemanager::copy_code_and_inputs_to_dir()","neptunemanager::copy_code_to_dir()","neptunemanager::copy_file_to_dir()","neptunemanager#copy_from_shadow()","neptunemanager::copy_inputs_to_dir()","neptunejobdata#cost()","neptunemanager::create_temp_dir()","userappclient#delete_app()","userappclient#delete_instance()","infrastructuremanagerclient#describe_instances()","djinnjobdata::deserialize()","neptunemanager#dispatch_jobs()","datastorerepo#do_http_get_for_get()","datastorerepo#do_http_post_for_set()","userappclient#does_app_exist?()","neptunemanager#does_file_exist()","datastore#does_file_exist?()","datastorerepo#does_file_exist?()","datastores3#does_file_exist?()","userappclient#does_user_exist?()","taskengine#engine_name()","taskengineappscale#engine_name()","taskenginegoogleappengine#engine_name()","neptunemanager#execute_multiple_tasks()","djinnjobdata#extend_time()","neptunemanager#find_neighbors()","neptunemanager#find_open_nodes()","zkinterface::find_open_nodes_in_cloud()","neptunejobdata::from_hash()","datastore#get_acl()","datastorerepo#get_acl()","datastores3#get_acl()","neptunemanager#get_acl()","userappclient#get_all_apps()","appcontrollerclient#get_all_public_ips()","userappclient#get_all_users()","userappclient#get_app_data()","zkinterface::get_app_hosters()","zkinterface::get_app_instances_for_ip()","taskengine#get_app_url()","taskengineappscale#get_app_url()","taskenginegoogleappengine#get_app_url()","zkinterface::get_appcontroller_lock()","zkinterface::get_appcontroller_state()","helperfunctions::get_cert()","userappclient#get_cloud_admin()","helperfunctions::get_cloud_info()","taskqueueazurequeue#get_creds()","taskqueuegoogleappengine#get_creds()","taskqueuerabbitmq#get_creds()","taskqueuesqs#get_creds()","datastorefactory::get_datastore()","enginefactory::get_engine()","neptunemanager#get_engines_for_creds()","zkinterface::get_failed_nodes()","userappclient#get_hosts_for_app()","zkinterface::get_ip_info()","neptunemanager#get_job_data()","zkinterface::get_job_data_for_ip()","neptunemanager#get_job_name()","helperfunctions::get_key()","neptunemanager#get_length_of_all_queues()","neptunemanager#get_lock_file_path()","zkinterface::get_max_machines_for_babel_slaves()","helperfunctions::get_my_public_ip()","neptunemanager#get_n_items_of_work()","neptunemanager#get_node_roles()","neptunemanager#get_node_with_role()","neptunemanager#get_output()","datastore#get_output_and_return_contents()","datastorerepo#get_output_and_return_contents()","datastores3#get_output_and_return_contents()","datastorewazstorage#get_output_and_return_contents()","datastore#get_output_and_save_to_fs()","datastorerepo#get_output_and_save_to_fs()","datastores3#get_output_and_save_to_fs()","datastorewazstorage#get_output_and_save_to_fs()","datastorewazstorage#get_output_with_file_list()","queuefactory::get_queue()","neptunemanager#get_queues_from_shadow()","appcontrollerclient#get_queues_in_use()","neptunemanager#get_queues_in_use()","neptunemanagerclient#get_queues_in_use()","helperfunctions::get_random_alphanumeric()","helperfunctions::get_secret()","neptunemanager#get_seed_vals()","datastores3#get_single_file_and_save_to_fs()","appcontrollerclient#get_stats()","appcontrollerclient#get_status()","neptunemanager#get_supported_babel_engines()","userappclient#get_tar()","userappclient#get_user_data()","appcontrollerclient#get_userappserver_ip()","neptunemanager#has_all_required_params?()","zkinterface::init()","zkinterface::init_to_ip()","neptunemanager#initialize_zookeeper_connection()","datastorerepoonappengine#is_app_running?()","userappclient#is_app_uploaded?()","neptunemanager#is_cloud?()","appcontrollerclient#is_done_initializing?()","appcontrollerclient#is_done_loading?()","neptunemanager#is_hybrid_cloud?()","neptunemanager#is_job_running()","zkinterface::is_node_done_loading?()","zkinterface::is_node_live?()","helperfunctions::is_port_open?()","taskqueuegoogleappengine#is_pull_queue_app_running?()","neptunemanager::is_storage_location?()","userappclient#is_user_cloud_admin?()","helperfunctions::local_ip()","zkinterface::lock_and_run()","neptunemanager#lock_file_exists?()","neptunemanager::log()","appcontrollerclient#make_call()","infrastructuremanagerclient#make_call()","neptunemanagerclient#make_call()","userappclient#make_call()","neptunemanager#manage_virtual_machines()","neptunemanager#mapreduce_run_job()","djinnjobdata#method_missing()","neptunemanager#mpi_run_job()","neptunemanager#my_node()","neptunemanager::neptune_parse_creds()","appcontrollerclient::new()","datastore::new()","datastorerepo::new()","datastorerepoonappengine::new()","datastorerepoonappscale::new()","datastores3::new()","datastorewazstorage::new()","djinnjobdata::new()","infrastructuremanagerclient::new()","neptunejobdata::new()","neptunemanager::new()","neptunemanagerclient::new()","taskengine::new()","taskengineappscale::new()","taskenginegoogleappengine::new()","taskqueue::new()","taskqueueazurequeue::new()","taskqueuegoogleappengine::new()","taskqueuerabbitmq::new()","taskqueuesqs::new()","userappclient::new()","neptunemanagerserver#on_init()","neptunemanager#optimal_nodes()","neptunemanager#optimal_nodes_hill_climbing()","datastores3::parse_s3_key()","taskqueue#pop()","taskqueueazurequeue#pop()","taskqueuegoogleappengine#pop()","taskqueuerabbitmq#pop()","taskqueuesqs#pop()","taskengine#push()","taskqueue#push()","taskqueueazurequeue#push()","taskqueuegoogleappengine#push()","taskqueuerabbitmq#push()","taskqueuesqs#push()","neptunemanager#put_input()","helperfunctions::read_file()","helperfunctions::read_json_file()","zkinterface::reinitialize()","zkinterface::release_appcontroller_lock()","zkinterface::remove_app_entry()","zkinterface::remove_ip_from_ip_list()","neptunemanager#remove_lock_file()","zkinterface::remove_node_information()","appcontrollerclient#remove_role()","djinnjobdata#remove_roles()","neptunemanager#remove_roles()","zkinterface::remove_roles_from_node()","neptunemanager::run_code()","infrastructuremanagerclient#run_instances()","neptunemanager#run_job_on_master()","neptunemanager#run_jobs_in_parallel()","neptunemanager#run_jobs_in_serial()","appcontrollerclient#run_neptune_job()","neptunemanagerclient#run_neptune_job()","neptunemanager#run_or_delegate_tasks()","helperfunctions::run_remote_command()","neptunemanager#run_task()","taskengine#run_task()","neptunemanager#run_via_engine()","neptunemanager#run_via_executor()","datastores3#s3_bucket_exists?()","neptunemanager::save_output()","taskengine#save_output_to_local_fs()","helperfunctions::scp_file()","djinnjobdata#serialize()","datastore#set_acl()","datastorerepo#set_acl()","datastores3#set_acl()","neptunemanager#set_acl()","appcontrollerclient#set_apps()","zkinterface::set_done_loading()","zkinterface::set_job_data_for_ip()","zkinterface::set_live_node_ephemeral_link()","zkinterface::set_max_machines_for_babel_slaves()","appcontrollerclient#set_parameters()","djinnjobdata#set_roles()","djinnjobdata#set_time_info()","helperfunctions::shell()","djinnjobdata#should_destroy?()","djinnjobdata#should_extend?()","taskqueueazurequeue#size()","taskqueuegoogleappengine#size()","taskqueuerabbitmq#size()","taskqueuesqs#size()","helperfunctions::sleep_until_port_is_open()","neptunemanager#spawn_babel_slaves()","neptunemanager#spawn_nodes_for_neptune?()","infrastructuremanagerclient#spawn_vms()","neptunemanager#start()","neptunemanager#start_babel_master()","neptunemanager#start_babel_slave()","neptunemanager#start_job()","neptunemanager#start_job_roles()","appcontrollerclient#status()","appcontrollerclient#stop_app()","neptunemanager#stop_babel_master()","neptunemanager#stop_babel_slave()","neptunemanager#stop_job_roles()","infrastructuremanagerclient#terminate_instances()","djinnjobdata#to_hash()","neptunejobdata#to_hash()","djinnjobdata#to_s()","neptunejobdata#to_s()","taskengine#to_s()","taskqueue#to_s()","taskqueueazurequeue#to_s()","taskqueuegoogleappengine#to_s()","taskqueuerabbitmq#to_s()","taskqueuesqs#to_s()","neptunejobdata#total_time()","neptunemanager#touch_lock_file()","neptunemanager#uncompress_file()","appcontrollerclient#update()","zkinterface::update_ips_timestamp()","taskengine#upload_app()","taskengineappscale#upload_app()","taskenginegoogleappengine::upload_app()","taskenginegoogleappengine#upload_app()","neptunemanager#valid_secret?()","neptunemanager#validate_environment()","neptunemanager#wait_for_allotted_time()","taskqueuegoogleappengine#wait_for_app_to_start_serving()","appcontrollerclient#wait_for_node_to_be()","taskengine#wait_for_task_to_finish()","zkinterface::write_appcontroller_state()","neptunemanager::write_babel_outputs()","helperfunctions::write_file()","neptunemanager#write_job_output()","neptunemanager#write_job_output_handler()","neptunemanager#write_job_output_str()","helperfunctions::write_json_file()","zkinterface::write_node_information()","datastore#write_remote_file_from_local_file()","datastorerepo#write_remote_file_from_local_file()","datastores3#write_remote_file_from_local_file()","datastorewazstorage#write_remote_file_from_local_file()","datastore#write_remote_file_from_string()","datastorerepo#write_remote_file_from_string()","datastores3#write_remote_file_from_string()","datastorewazstorage#write_remote_file_from_string()","datastorewazstorage#write_remote_file_with_container()"],"info":[["AppControllerClient","","AppControllerClient.html","","<p>A client that uses SOAP messages to communicate with the underlying cloud\nplatform (here, AppScale). …\n"],["BadConfigurationException","","BadConfigurationException.html","","<p>BadConfigurationExceptions represent an exception that can be thrown by the\nAppController or any other …\n"],["Datastore","","Datastore.html","","<p>Datastore provides a single interface that Neptune jobs can use to store\nand retrieve data. Since ACLs …\n"],["DatastoreFactory","","DatastoreFactory.html","","<p>DatastoreFactory provides Neptune jobs with a single method that can be\nused to gain access to one of …\n"],["DatastoreRepo","","DatastoreRepo.html","","<p>A class that abstracts away access to our Repository application (also\nknown as the Repo). Since it’s …\n"],["DatastoreRepoOnAppEngine","","DatastoreRepoOnAppEngine.html","","<p>An implementation of the Repository app that assumes it is running within\nApp Engine. Since App Engine …\n"],["DatastoreRepoOnAppScale","","DatastoreRepoOnAppScale.html","","<p>An implementation of the Repository app that assumes it is running within\nAppScale. AppScale is assumed …\n"],["DatastoreS3","","DatastoreS3.html","","<p>A class that abstracts away access to Amazon S3, and services that are\nAPI-compatible with S3. Services …\n"],["DatastoreWAZStorage","","DatastoreWAZStorage.html","",""],["DjinnJobData","","DjinnJobData.html","","<p>A class that represents a single node running in AppScale. It provides\nmethods to easily see the IP address …\n"],["EngineFactory","","EngineFactory.html","","<p>The EngineFactory follows the Factory design pattern (more or less) to\nprovide callers with one way to …\n"],["FailedZooKeeperOperationException","","FailedZooKeeperOperationException.html","","<p>A class of exceptions that we throw whenever we perform a ZooKeeper\noperation that does not return successfully …\n"],["GoogleAppEnginePullQueue","","GoogleAppEnginePullQueue.html","",""],["GoogleAppEnginePushQueue","","GoogleAppEnginePushQueue.html","",""],["HelperFunctions","","HelperFunctions.html","","<p>HelperFunctions holds miscellaneous functions - functions that really\naren’t bound to a particular service, …\n"],["InfrastructureManagerClient","","InfrastructureManagerClient.html","",""],["JSONClient","","JSONClient.html","","<p>A HTTP client that assumes that responses returned are JSON, and\nautomatically loads them, returning …\n"],["NeptuneJobData","","NeptuneJobData.html","",""],["NeptuneManager","","NeptuneManager.html","","<p>things to fix\n<p>remove all dead code from AppController/helperfunctions\n<p>remove all dead code from Neptune/helperfunctions …\n"],["NeptuneManagerClient","","NeptuneManagerClient.html","","<p>A client that uses SOAP messages to communicate with the underlying cloud\nplatform (here, AppScale). …\n"],["NeptuneManagerServer","","NeptuneManagerServer.html","","<p>NeptuneManagerServer is a wrapper around NeptuneManager that  gives it the\nability to respond to SOAP …\n"],["Object","","Object.html","",""],["QueueFactory","","QueueFactory.html","","<p>QueueFactory provides users with a single way to get a TaskQueue that\noperates on any cloud. All TaskQueues …\n"],["TaskEngine","","TaskEngine.html","",""],["TaskEngineAppScale","","TaskEngineAppScale.html","",""],["TaskEngineGoogleAppEngine","","TaskEngineGoogleAppEngine.html","",""],["TaskQueue","","TaskQueue.html","","<p>TaskQueue provides an single interface that Babel uses for its queueing\nsystem. The interface is intentionally …\n"],["TaskQueueAzureQueue","","TaskQueueAzureQueue.html","",""],["TaskQueueGoogleAppEngine","","TaskQueueGoogleAppEngine.html","",""],["TaskQueueRabbitMQ","","TaskQueueRabbitMQ.html","",""],["TaskQueueSQS","","TaskQueueSQS.html","","<p>TaskQueueSQS provides a simple interface (implementing TaskQueue) to\nAmazon’s Simple Queue Service ( …\n"],["UserAppClient","","UserAppClient.html","","<p>AppControllers and other services need to read or write data relating to\nusers and applications hosted …\n"],["ZKInterface","","ZKInterface.html","","<p>The AppController employs the open source software ZooKeeper as a highly\navailable naming service, to …\n"],["ZooKeeperLockException","","ZooKeeperLockException.html","",""],["acquire_nodes","NeptuneManager","NeptuneManager.html#method-i-acquire_nodes","(job_data)",""],["acquire_nodes_for_cloud","NeptuneManager","NeptuneManager.html#method-i-acquire_nodes_for_cloud","(cloud_num, new_vms_needed, job_data)",""],["add_app_entry","ZKInterface","ZKInterface.html#method-c-add_app_entry","(appname, ip, location)",""],["add_app_instance","ZKInterface","ZKInterface.html#method-c-add_app_instance","(app_name, ip, port)","<p>Adds an entry to ZooKeeper for the given IP, storing information about the\nGoogle App engine application …\n"],["add_instance","UserAppClient","UserAppClient.html#method-i-add_instance","(appname, host, port, retry_on_except=true)",""],["add_ip_to_ip_list","ZKInterface","ZKInterface.html#method-c-add_ip_to_ip_list","(ip)","<p>Add the given IP to the list of IPs that we store in ZooKeeper. If the IPs\nfile doesn’t exist in ZooKeeper …\n"],["add_metadata_to_job","TaskEngine","TaskEngine.html#method-i-add_metadata_to_job","(job_data, start_time, end_time)",""],["add_nodes","NeptuneManager","NeptuneManager.html#method-i-add_nodes","(node_info)",""],["add_role","AppControllerClient","AppControllerClient.html#method-i-add_role","(role)",""],["add_roles","DjinnJobData","DjinnJobData.html#method-i-add_roles","(roles)",""],["add_roles_and_wait","NeptuneManager","NeptuneManager.html#method-i-add_roles_and_wait","(nodes, roles)",""],["add_roles_to_node","ZKInterface","ZKInterface.html#method-c-add_roles_to_node","(roles, node)","<p>Adds the specified role to the given node in ZooKeeper. A node can call\nthis function to add a role to …\n"],["add_timing_info","NeptuneManager","NeptuneManager.html#method-i-add_timing_info","(job_data, nodes_to_use, start_time, end_time)",""],["app_needs_uploading?","TaskEngine","TaskEngine.html#method-i-app_needs_uploading-3F","(job_data)",""],["app_needs_uploading?","TaskEngineAppScale","TaskEngineAppScale.html#method-i-app_needs_uploading-3F","(job_data)","<p>To see if an app is running in AppScale, we just see if the app is  already\nuploaded, returning the opposite …\n"],["app_needs_uploading?","TaskEngineGoogleAppEngine","TaskEngineGoogleAppEngine.html#method-i-app_needs_uploading-3F","(job_data)","<p>Uploading the application to Google App Engine takes a non-trivially long\namount of time, and since the …\n"],["appscale_run_job","NeptuneManager","NeptuneManager.html#method-i-appscale_run_job","(nodes, job_data, secret)",""],["babel_run_job","NeptuneManager","NeptuneManager.html#method-i-babel_run_job","(nodes, jobs, secret)","<p>This method is the spawning service for Babel - that is, it decides where \ntasks should be spawned.  …\n"],["build_app_via_oration","TaskEngine","TaskEngine.html#method-i-build_app_via_oration","(job_data, dir)",""],["can_run_job","NeptuneManager","NeptuneManager.html#method-i-can_run_job","(job_data)",""],["can_run_jobs_in_parallel?","NeptuneManager","NeptuneManager.html#method-i-can_run_jobs_in_parallel-3F","(jobs)",""],["change_password","UserAppClient","UserAppClient.html#method-i-change_password","(user, new_password, retry_on_except=true)",""],["cicero_run_job","NeptuneManager","NeptuneManager.html#method-i-cicero_run_job","(nodes, jobs, secret)",""],["cleanup","NeptuneManager","NeptuneManager.html#method-c-cleanup","(dir)",""],["cleanup_code","NeptuneManager","NeptuneManager.html#method-i-cleanup_code","(code)",""],["commit_new_app","UserAppClient","UserAppClient.html#method-i-commit_new_app","(user, app_name, language, file_location)",""],["commit_new_app_name","UserAppClient","UserAppClient.html#method-i-commit_new_app_name","(user, app_name, language, retry_on_except=true)",""],["commit_new_user","UserAppClient","UserAppClient.html#method-i-commit_new_user","(user, encrypted_password, user_type, retry_on_except=true)",""],["commit_tar","UserAppClient","UserAppClient.html#method-i-commit_tar","(app_name, file_location, retry_on_except=true)",""],["compile_code","NeptuneManager","NeptuneManager.html#method-i-compile_code","(job_data, secret)",""],["convert_location_array_to_class","NeptuneManager","NeptuneManager.html#method-c-convert_location_array_to_class","(nodes, keyname)",""],["convert_location_class_to_array","NeptuneManager","NeptuneManager.html#method-c-convert_location_class_to_array","(djinn_locations)",""],["copy_code_and_inputs_to_dir","NeptuneManager","NeptuneManager.html#method-c-copy_code_and_inputs_to_dir","(job_data, dir)",""],["copy_code_to_dir","NeptuneManager","NeptuneManager.html#method-c-copy_code_to_dir","(job_data, dir)",""],["copy_file_to_dir","NeptuneManager","NeptuneManager.html#method-c-copy_file_to_dir","(remote, local, job_data)",""],["copy_from_shadow","NeptuneManager","NeptuneManager.html#method-i-copy_from_shadow","(location_on_shadow)",""],["copy_inputs_to_dir","NeptuneManager","NeptuneManager.html#method-c-copy_inputs_to_dir","(job_data, dir)",""],["cost","NeptuneJobData","NeptuneJobData.html#method-i-cost","()","<p>Computes the cost incurred to utilize the number of nodes in this job on a\nper-hour basis. Right now, …\n"],["create_temp_dir","NeptuneManager","NeptuneManager.html#method-c-create_temp_dir","()",""],["delete_app","UserAppClient","UserAppClient.html#method-i-delete_app","(app, retry_on_except=true)",""],["delete_instance","UserAppClient","UserAppClient.html#method-i-delete_instance","(appname, host, port, retry_on_except=true)",""],["describe_instances","InfrastructureManagerClient","InfrastructureManagerClient.html#method-i-describe_instances","(parameters)",""],["deserialize","DjinnJobData","DjinnJobData.html#method-c-deserialize","(serialized)",""],["dispatch_jobs","NeptuneManager","NeptuneManager.html#method-i-dispatch_jobs","(jobs)",""],["do_http_get_for_get","DatastoreRepo","DatastoreRepo.html#method-i-do_http_get_for_get","(repo_path, type)","<p>A convenience method that can be used to perform GET requests on the Repo\napp, returning whatever it …\n"],["do_http_post_for_set","DatastoreRepo","DatastoreRepo.html#method-i-do_http_post_for_set","(repo_path, type, val)","<p>A convenience method that can be used to perform POST requests on the Repo\napp, returning a boolean corresponding …\n"],["does_app_exist?","UserAppClient","UserAppClient.html#method-i-does_app_exist-3F","(app, retry_on_except=true)",""],["does_file_exist","NeptuneManager","NeptuneManager.html#method-i-does_file_exist","(file, job_data, secret)",""],["does_file_exist?","Datastore","Datastore.html#method-i-does_file_exist-3F","(path)","<p>Checks whether the given file exists in the specified datastore.\n"],["does_file_exist?","DatastoreRepo","DatastoreRepo.html#method-i-does_file_exist-3F","(repo_path)","<p>Queries the Repo app to see if the given file exists.\n"],["does_file_exist?","DatastoreS3","DatastoreS3.html#method-i-does_file_exist-3F","(path)","<p>Checks whether the given file exists in S3.\n"],["does_user_exist?","UserAppClient","UserAppClient.html#method-i-does_user_exist-3F","(user, retry_on_except=true)",""],["engine_name","TaskEngine","TaskEngine.html#method-i-engine_name","()",""],["engine_name","TaskEngineAppScale","TaskEngineAppScale.html#method-i-engine_name","()",""],["engine_name","TaskEngineGoogleAppEngine","TaskEngineGoogleAppEngine.html#method-i-engine_name","()",""],["execute_multiple_tasks","NeptuneManager","NeptuneManager.html#method-i-execute_multiple_tasks","(tasks)","<p>This method spawns a thread for each task given to execute them in\nparallel. It then waits for all tasks …\n"],["extend_time","DjinnJobData","DjinnJobData.html#method-i-extend_time","()",""],["find_neighbors","NeptuneManager","NeptuneManager.html#method-i-find_neighbors","(val, search_space)",""],["find_open_nodes","NeptuneManager","NeptuneManager.html#method-i-find_open_nodes","(cloud, nodes_needed, job_data)",""],["find_open_nodes_in_cloud","ZKInterface","ZKInterface.html#method-c-find_open_nodes_in_cloud","(number_of_nodes_needed, cloud_num)",""],["from_hash","NeptuneJobData","NeptuneJobData.html#method-c-from_hash","(data)",""],["get_acl","Datastore","Datastore.html#method-i-get_acl","(path)","<p>Returns the access policy for the named file, in the appropriate datastore.\n"],["get_acl","DatastoreRepo","DatastoreRepo.html#method-i-get_acl","(repo_path)","<p>Retrieves the access policy for the given file.\n"],["get_acl","DatastoreS3","DatastoreS3.html#method-i-get_acl","(path)","<p>Returns the access policy for the specified file. TODO(cgb): Need to\nimplement this and start using it. …\n"],["get_acl","NeptuneManager","NeptuneManager.html#method-i-get_acl","(job_data, secret)",""],["get_all_apps","UserAppClient","UserAppClient.html#method-i-get_all_apps","(retry_on_except=true)",""],["get_all_public_ips","AppControllerClient","AppControllerClient.html#method-i-get_all_public_ips","()",""],["get_all_users","UserAppClient","UserAppClient.html#method-i-get_all_users","(retry_on_except=true)",""],["get_app_data","UserAppClient","UserAppClient.html#method-i-get_app_data","(appname, retry_on_except=true)",""],["get_app_hosters","ZKInterface","ZKInterface.html#method-c-get_app_hosters","(appname)",""],["get_app_instances_for_ip","ZKInterface","ZKInterface.html#method-c-get_app_instances_for_ip","(ip)","<p>Returns an Array of Hashes that correspond to the App Engine applications\nhosted on the given ip address. …\n"],["get_app_url","TaskEngine","TaskEngine.html#method-i-get_app_url","(job_data)",""],["get_app_url","TaskEngineAppScale","TaskEngineAppScale.html#method-i-get_app_url","(job_data)","<p>To get the URL that an app can be reached with in AppScale, just find out\nwhere the login node is. It …\n"],["get_app_url","TaskEngineGoogleAppEngine","TaskEngineGoogleAppEngine.html#method-i-get_app_url","(job_data)",""],["get_appcontroller_lock","ZKInterface","ZKInterface.html#method-c-get_appcontroller_lock","()","<p>Gets a lock that AppControllers can use to have exclusive write access\n(between other AppControllers …\n"],["get_appcontroller_state","ZKInterface","ZKInterface.html#method-c-get_appcontroller_state","()",""],["get_cert","HelperFunctions","HelperFunctions.html#method-c-get_cert","(filename)",""],["get_cloud_admin","UserAppClient","UserAppClient.html#method-i-get_cloud_admin","()","<p>This method finds the first user who is a cloud administrator. Since the\nUserAppServer doesn’t provide …\n"],["get_cloud_info","HelperFunctions","HelperFunctions.html#method-c-get_cloud_info","()",""],["get_creds","TaskQueueAzureQueue","TaskQueueAzureQueue.html#method-i-get_creds","()","<p>returns all the credentials needed to access this queue for Azure, it’s\njust the account name and access …\n"],["get_creds","TaskQueueGoogleAppEngine","TaskQueueGoogleAppEngine.html#method-i-get_creds","()","<p>returns all the credentials needed to access this queue for App Engine,\nit’s all the job data, since …\n"],["get_creds","TaskQueueRabbitMQ","TaskQueueRabbitMQ.html#method-i-get_creds","()","<p>returns all the credentials needed to access this queue TODO(cgb): decide\nwhat credentials are necessary …\n"],["get_creds","TaskQueueSQS","TaskQueueSQS.html#method-i-get_creds","()","<p>Returns all the credentials needed to access this queue. For SQS, it’s \njust the access key and secret …\n"],["get_datastore","DatastoreFactory","DatastoreFactory.html#method-c-get_datastore","(name, credentials)","<p>Creates and returns the specified Datastore, with the given credentials.\n"],["get_engine","EngineFactory","EngineFactory.html#method-c-get_engine","(engine, job_data)",""],["get_engines_for_creds","NeptuneManager","NeptuneManager.html#method-i-get_engines_for_creds","(job_data, credentials, engines_to_add)","<p>Checks the credentials that the user has given us (job_data) to see if they\nmatch up to the credentials …\n"],["get_failed_nodes","ZKInterface","ZKInterface.html#method-c-get_failed_nodes","()","<p>Queries ZooKeeper for a list of all IPs that are currently up, and then\nchecks if each of those IPs has …\n"],["get_hosts_for_app","UserAppClient","UserAppClient.html#method-i-get_hosts_for_app","(appname)","<p>This method returns an array of strings, each corresponding to a ip:port\nthat the given app is hosted …\n"],["get_ip_info","ZKInterface","ZKInterface.html#method-c-get_ip_info","()","<p>Returns a Hash containing the list of the IPs that are currently running\nwithin AppScale as well as a …\n"],["get_job_data","NeptuneManager","NeptuneManager.html#method-i-get_job_data","(job_name, time)",""],["get_job_data_for_ip","ZKInterface","ZKInterface.html#method-c-get_job_data_for_ip","(ip)","<p>Returns a serialized DjinnJobData string that we store in ZooKeeper for the\ngiven IP address, which callers …\n"],["get_job_name","NeptuneManager","NeptuneManager.html#method-i-get_job_name","(job_data)",""],["get_key","HelperFunctions","HelperFunctions.html#method-c-get_key","(filename)",""],["get_length_of_all_queues","NeptuneManager","NeptuneManager.html#method-i-get_length_of_all_queues","(queues)",""],["get_lock_file_path","NeptuneManager","NeptuneManager.html#method-i-get_lock_file_path","(job_data)",""],["get_max_machines_for_babel_slaves","ZKInterface","ZKInterface.html#method-c-get_max_machines_for_babel_slaves","()","<p>Returns the maximum number of nodes that should be used to run Babel jobs\n(not including the Babel Master …\n"],["get_my_public_ip","HelperFunctions","HelperFunctions.html#method-c-get_my_public_ip","()",""],["get_n_items_of_work","NeptuneManager","NeptuneManager.html#method-i-get_n_items_of_work","(n, queues)",""],["get_node_roles","NeptuneManager","NeptuneManager.html#method-i-get_node_roles","(job_data)",""],["get_node_with_role","NeptuneManager","NeptuneManager.html#method-i-get_node_with_role","(role)",""],["get_output","NeptuneManager","NeptuneManager.html#method-i-get_output","(job_data, secret)",""],["get_output_and_return_contents","Datastore","Datastore.html#method-i-get_output_and_return_contents","(remote_path)","<p>Queries the remote datastore for the given file and returns its contents as\na string\n"],["get_output_and_return_contents","DatastoreRepo","DatastoreRepo.html#method-i-get_output_and_return_contents","(repo_path)","<p>Returns the output of the given file as a string.\n"],["get_output_and_return_contents","DatastoreS3","DatastoreS3.html#method-i-get_output_and_return_contents","(path)","<p>Contacts S3 to retrieve a file, returning the contents of the file as a\nstring.\n"],["get_output_and_return_contents","DatastoreWAZStorage","DatastoreWAZStorage.html#method-i-get_output_and_return_contents","(remote_path)","<p>Given an S3-style storage path (“/container/blob”), fetches the named\nBlob from Azure Blob …\n"],["get_output_and_save_to_fs","Datastore","Datastore.html#method-i-get_output_and_save_to_fs","(remote_path, local_path)","<p>Queries the remote datastore for the given file and writes its contents to\nthe local filesystem.\n"],["get_output_and_save_to_fs","DatastoreRepo","DatastoreRepo.html#method-i-get_output_and_save_to_fs","(repo_path, local_path)","<p>Writes the contents of the remotely specified file to the local filesystem.\n"],["get_output_and_save_to_fs","DatastoreS3","DatastoreS3.html#method-i-get_output_and_save_to_fs","(s3_path, local_path)","<p>Contacts S3 to retrieve a file, and returns the location on the local\nfilesystem that we wrote it to. …\n"],["get_output_and_save_to_fs","DatastoreWAZStorage","DatastoreWAZStorage.html#method-i-get_output_and_save_to_fs","(remote_path, local_path)",""],["get_output_with_file_list","DatastoreWAZStorage","DatastoreWAZStorage.html#method-i-get_output_with_file_list","(remote_list, local_path, container)",""],["get_queue","QueueFactory","QueueFactory.html#method-c-get_queue","(name, job_data)",""],["get_queues_from_shadow","NeptuneManager","NeptuneManager.html#method-i-get_queues_from_shadow","()",""],["get_queues_in_use","AppControllerClient","AppControllerClient.html#method-i-get_queues_in_use","()",""],["get_queues_in_use","NeptuneManager","NeptuneManager.html#method-i-get_queues_in_use","(secret)","<p>Tasks can be stored in multiple queues concurrently, so this method\nprovides workers (babel_slaves) with …\n"],["get_queues_in_use","NeptuneManagerClient","NeptuneManagerClient.html#method-i-get_queues_in_use","()",""],["get_random_alphanumeric","HelperFunctions","HelperFunctions.html#method-c-get_random_alphanumeric","(length=10)","<p>Returns a random string composed of alphanumeric characters, as long as the\nuser requests.\n"],["get_secret","HelperFunctions","HelperFunctions.html#method-c-get_secret","(filename=\"/etc/appscale/secret.key\")",""],["get_seed_vals","NeptuneManager","NeptuneManager.html#method-i-get_seed_vals","(num_vals)",""],["get_single_file_and_save_to_fs","DatastoreS3","DatastoreS3.html#method-i-get_single_file_and_save_to_fs","(s3_path, local_path)",""],["get_stats","AppControllerClient","AppControllerClient.html#method-i-get_stats","(ok_to_fail=false)",""],["get_status","AppControllerClient","AppControllerClient.html#method-i-get_status","(ok_to_fail=false)",""],["get_supported_babel_engines","NeptuneManager","NeptuneManager.html#method-i-get_supported_babel_engines","(job_data, secret)","<p>Tasks can execute over a number of different engines (a queue and an\nexecutor). From the credentials …\n"],["get_tar","UserAppClient","UserAppClient.html#method-i-get_tar","(appname, retry_on_except=true)",""],["get_user_data","UserAppClient","UserAppClient.html#method-i-get_user_data","(username, retry_on_except=true)",""],["get_userappserver_ip","AppControllerClient","AppControllerClient.html#method-i-get_userappserver_ip","(verbose_level=\"low\")",""],["has_all_required_params?","NeptuneManager","NeptuneManager.html#method-i-has_all_required_params-3F","(job_data, required_params)","<p>Verifies that the given job_data has all of the parameters specified by\nrequired_params.\n"],["init","ZKInterface","ZKInterface.html#method-c-init","(my_node, all_nodes)","<p>Initializes a new ZooKeeper connection to the “closest” node in the\nsystem. “Closeness” …\n"],["init_to_ip","ZKInterface","ZKInterface.html#method-c-init_to_ip","(client_ip, ip)","<p>Initializes a new ZooKeeper connection to the IP address specified. Callers\nshould use this when they …\n"],["initialize_zookeeper_connection","NeptuneManager","NeptuneManager.html#method-i-initialize_zookeeper_connection","()",""],["is_app_running?","DatastoreRepoOnAppEngine","DatastoreRepoOnAppEngine.html#method-i-is_app_running-3F","()","<p>Sees if the Repo application is running at the @host we’ve set for it.\n"],["is_app_uploaded?","UserAppClient","UserAppClient.html#method-i-is_app_uploaded-3F","(appname)","<p>This method sees if the given app is already uploaded in the system.\nTODO(cgb): compare this with is_app_enabled …\n"],["is_cloud?","NeptuneManager","NeptuneManager.html#method-i-is_cloud-3F","()",""],["is_done_initializing?","AppControllerClient","AppControllerClient.html#method-i-is_done_initializing-3F","()",""],["is_done_loading?","AppControllerClient","AppControllerClient.html#method-i-is_done_loading-3F","()",""],["is_hybrid_cloud?","NeptuneManager","NeptuneManager.html#method-i-is_hybrid_cloud-3F","()",""],["is_job_running","NeptuneManager","NeptuneManager.html#method-i-is_job_running","(job_data, secret)",""],["is_node_done_loading?","ZKInterface","ZKInterface.html#method-c-is_node_done_loading-3F","(ip)","<p>Checks ZooKeeper to see if the given node has finished loading its roles,\nwhich it indicates via a file …\n"],["is_node_live?","ZKInterface","ZKInterface.html#method-c-is_node_live-3F","(ip)","<p>Checks ZooKeeper to see if the given node is alive, by checking if the\nephemeral file it has created …\n"],["is_port_open?","HelperFunctions","HelperFunctions.html#method-c-is_port_open-3F","(ip, port, use_ssl=DONT_USE_SSL)",""],["is_pull_queue_app_running?","TaskQueueGoogleAppEngine","TaskQueueGoogleAppEngine.html#method-i-is_pull_queue_app_running-3F","()",""],["is_storage_location?","NeptuneManager","NeptuneManager.html#method-c-is_storage_location-3F","(file)",""],["is_user_cloud_admin?","UserAppClient","UserAppClient.html#method-i-is_user_cloud_admin-3F","(user, retry_on_except=true)",""],["local_ip","HelperFunctions","HelperFunctions.html#method-c-local_ip","()","<p>Code for local_ip taken from \ncoderrr.wordpress.com/2008/05/28/get-your-local-ip-address/\n"],["lock_and_run","ZKInterface","ZKInterface.html#method-c-lock_and_run","(&block)","<p>This method provides callers with an easier way to read and write to\nAppController data in ZooKeeper …\n"],["lock_file_exists?","NeptuneManager","NeptuneManager.html#method-i-lock_file_exists-3F","(job_data)",""],["log","NeptuneManager","NeptuneManager.html#method-c-log","(msg)",""],["make_call","AppControllerClient","AppControllerClient.html#method-i-make_call","(time, retry_on_except, callr, ok_to_fail=false)","<p>A helper method that makes SOAP calls for us. This method is mainly here to\nreduce code duplication: …\n"],["make_call","InfrastructureManagerClient","InfrastructureManagerClient.html#method-i-make_call","(time, retry_on_except, callr, ok_to_fail=false)","<p>A helper method that makes SOAP calls for us. This method is mainly here to\nreduce code duplication: …\n"],["make_call","NeptuneManagerClient","NeptuneManagerClient.html#method-i-make_call","(time, retry_on_except, callr, ok_to_fail=false)","<p>A helper method that makes SOAP calls for us. This method is mainly here to\nreduce code duplication: …\n"],["make_call","UserAppClient","UserAppClient.html#method-i-make_call","(timeout, retry_on_except)",""],["manage_virtual_machines","NeptuneManager","NeptuneManager.html#method-i-manage_virtual_machines","()","<p>TODO(cgb): fix this broken code, moved from the AppController\n"],["mapreduce_run_job","NeptuneManager","NeptuneManager.html#method-i-mapreduce_run_job","(nodes, jobs, secret)",""],["method_missing","DjinnJobData","DjinnJobData.html#method-i-method_missing","(id, *args, &block)","<p>method_missing: will intercept calls to is_load_balancer?, is_appengine?\nand so on, without having all …\n"],["mpi_run_job","NeptuneManager","NeptuneManager.html#method-i-mpi_run_job","(nodes, job_data, secret)",""],["my_node","NeptuneManager","NeptuneManager.html#method-i-my_node","()",""],["neptune_parse_creds","NeptuneManager","NeptuneManager.html#method-c-neptune_parse_creds","(storage, job_data)",""],["new","AppControllerClient","AppControllerClient.html#method-c-new","(ip, secret)","<p>A constructor that requires both the IP address of the machine to\ncommunicate with as well as the secret …\n"],["new","Datastore","Datastore.html#method-c-new","(credentials)","<p>Creates a new Datastore from the given credentials (a Hash).\n"],["new","DatastoreRepo","DatastoreRepo.html#method-c-new","(credentials)","<p>Creates a new connection to the Repo running on AppScale. Since AppScale\nstarts the Repo automatically, …\n"],["new","DatastoreRepoOnAppEngine","DatastoreRepoOnAppEngine.html#method-c-new","(credentials)","<p>Creates a new connection to the Repo running on Google App Engine.\nDeployments take a non-trivial amount …\n"],["new","DatastoreRepoOnAppScale","DatastoreRepoOnAppScale.html#method-c-new","(credentials)","<p>Creates a new connection to the Repo running on AppScale. Since AppScale\nstarts the Repo automatically, …\n"],["new","DatastoreS3","DatastoreS3.html#method-c-new","(credentials)","<p>Validates the S3 credentials that we’ve been given and returns a new S3\ninterface accordingly.\n"],["new","DatastoreWAZStorage","DatastoreWAZStorage.html#method-c-new","(credentials)",""],["new","DjinnJobData","DjinnJobData.html#method-c-new","(roles, keyname)",""],["new","InfrastructureManagerClient","InfrastructureManagerClient.html#method-c-new","(secret)",""],["new","NeptuneJobData","NeptuneJobData.html#method-c-new","(name, num_nodes, start_time, end_time, instance_type)",""],["new","NeptuneManager","NeptuneManager.html#method-c-new","()","<p>TODO(cgb): back these up to zookeeper and restore from there as needed\n"],["new","NeptuneManagerClient","NeptuneManagerClient.html#method-c-new","(ip, secret)","<p>A constructor that requires both the IP address of the machine to\ncommunicate with as well as the secret …\n"],["new","TaskEngine","TaskEngine.html#method-c-new","(credentials)",""],["new","TaskEngineAppScale","TaskEngineAppScale.html#method-c-new","(credentials)",""],["new","TaskEngineGoogleAppEngine","TaskEngineGoogleAppEngine.html#method-c-new","(credentials)",""],["new","TaskQueue","TaskQueue.html#method-c-new","(credentials)","<p>Creates a new TaskQueue from the given credentials (a Hash).\n"],["new","TaskQueueAzureQueue","TaskQueueAzureQueue.html#method-c-new","(credentials)","<p>creates a new Azure queue via the WAZ-Queue RubyGem\n"],["new","TaskQueueGoogleAppEngine","TaskQueueGoogleAppEngine.html#method-c-new","(credentials)","<p>creates a new App Engine queue via the gtaskqueue executable\n"],["new","TaskQueueRabbitMQ","TaskQueueRabbitMQ.html#method-c-new","(credentials)","<p>creates a new RabbitMQ queue via the Bunny RubyGem code mostly adapted from\ngithub.com/ruby-amqp/bunny …\n"],["new","TaskQueueSQS","TaskQueueSQS.html#method-c-new","(credentials)","<p>Creates a new SQS queue connection and queue to store / retrieve tasks\nwith, via the AWS RubyGem. We …\n"],["new","UserAppClient","UserAppClient.html#method-c-new","(ip, secret)",""],["on_init","NeptuneManagerServer","NeptuneManagerServer.html#method-i-on_init","()","<p>When the NeptuneManagerServer starts, this method will expose only the\nnecessary methods via SOAP to …\n"],["optimal_nodes","NeptuneManager","NeptuneManager.html#method-i-optimal_nodes","(job_data)",""],["optimal_nodes_hill_climbing","NeptuneManager","NeptuneManager.html#method-i-optimal_nodes_hill_climbing","(job_data, thing_to_optimize)","<p>Hill Climbing Algorithm\n\n<pre># find minimum execution time t1\n# find neighbors t0 and t2\n\n# if t0 is too low ...</pre>\n"],["parse_s3_key","DatastoreS3","DatastoreS3.html#method-c-parse_s3_key","(key)","<p>Given a full S3 path, returns the bucket and filename.\n"],["pop","TaskQueue","TaskQueue.html#method-i-pop","()","<p>Removes an item off the distributed queue. If there is an item on the\nqueue, pop returns it as a Hash …\n"],["pop","TaskQueueAzureQueue","TaskQueueAzureQueue.html#method-i-pop","()",""],["pop","TaskQueueGoogleAppEngine","TaskQueueGoogleAppEngine.html#method-i-pop","()",""],["pop","TaskQueueRabbitMQ","TaskQueueRabbitMQ.html#method-i-pop","()",""],["pop","TaskQueueSQS","TaskQueueSQS.html#method-i-pop","()","<p>Retrieves an item from the queue, returning the Hash version of the\nJSON-dumped data. We should be the …\n"],["push","TaskEngine","TaskEngine.html#method-i-push","(job_data)",""],["push","TaskQueue","TaskQueue.html#method-i-push","(item)","<p>Adds a new item (a Hash) onto the distributed queue.\n"],["push","TaskQueueAzureQueue","TaskQueueAzureQueue.html#method-i-push","(item)","<p>stores a hash in the queue for later processing, by converting it to JSON\n"],["push","TaskQueueGoogleAppEngine","TaskQueueGoogleAppEngine.html#method-i-push","(item)","<p>stores a hash in the queue for later processing, by converting it to JSON\nand pushing it to our app engine …\n"],["push","TaskQueueRabbitMQ","TaskQueueRabbitMQ.html#method-i-push","(item)","<p>stores a hash in the queue for later processing, by converting it to JSON\n"],["push","TaskQueueSQS","TaskQueueSQS.html#method-i-push","(item)","<p>Stores a Hash in the queue for later processing. Since SQS can’t store\nitems in Hash format, we use the …\n"],["put_input","NeptuneManager","NeptuneManager.html#method-i-put_input","(job_data, secret)",""],["read_file","HelperFunctions","HelperFunctions.html#method-c-read_file","(location, chomp=true)",""],["read_json_file","HelperFunctions","HelperFunctions.html#method-c-read_json_file","(location)","<p>Reads the given file, which is assumed to be a JSON-loadable object, and\nreturns that JSON back to the …\n"],["reinitialize","ZKInterface","ZKInterface.html#method-c-reinitialize","()","<p>Creates a new connection to use with ZooKeeper. Useful for scenarios where\nthe ZooKeeper library has …\n"],["release_appcontroller_lock","ZKInterface","ZKInterface.html#method-c-release_appcontroller_lock","()","<p>Releases the lock that AppControllers use to have exclusive write access,\nwhich was acquired via self.get_appcontroller_lock …\n"],["remove_app_entry","ZKInterface","ZKInterface.html#method-c-remove_app_entry","(appname)",""],["remove_ip_from_ip_list","ZKInterface","ZKInterface.html#method-c-remove_ip_from_ip_list","(ip)","<p>Accesses the list of IP addresses stored in ZooKeeper and removes the given\nIP address from that list. …\n"],["remove_lock_file","NeptuneManager","NeptuneManager.html#method-i-remove_lock_file","(job_data)",""],["remove_node_information","ZKInterface","ZKInterface.html#method-c-remove_node_information","(ip)","<p>Deletes all information for a given node, whose data is stored in\nZooKeeper.\n"],["remove_role","AppControllerClient","AppControllerClient.html#method-i-remove_role","(role)","<p>CGB - removed timeout here - removing cassandra slave requires it to port\nthe data it owns to somebody …\n"],["remove_roles","DjinnJobData","DjinnJobData.html#method-i-remove_roles","(roles)",""],["remove_roles","NeptuneManager","NeptuneManager.html#method-i-remove_roles","(nodes, roles)",""],["remove_roles_from_node","ZKInterface","ZKInterface.html#method-c-remove_roles_from_node","(roles, node)","<p>Removes the specified roles from the given node in ZooKeeper. A node can \ncall this function to remove …\n"],["run_code","NeptuneManager","NeptuneManager.html#method-c-run_code","(job_data, dir)",""],["run_instances","InfrastructureManagerClient","InfrastructureManagerClient.html#method-i-run_instances","(parameters)",""],["run_job_on_master","NeptuneManager","NeptuneManager.html#method-i-run_job_on_master","(master_node, nodes_to_use, job_data)",""],["run_jobs_in_parallel","NeptuneManager","NeptuneManager.html#method-i-run_jobs_in_parallel","(jobs)",""],["run_jobs_in_serial","NeptuneManager","NeptuneManager.html#method-i-run_jobs_in_serial","(jobs)",""],["run_neptune_job","AppControllerClient","AppControllerClient.html#method-i-run_neptune_job","(nodes, job_data)",""],["run_neptune_job","NeptuneManagerClient","NeptuneManagerClient.html#method-i-run_neptune_job","(nodes, job_data)",""],["run_or_delegate_tasks","NeptuneManager","NeptuneManager.html#method-i-run_or_delegate_tasks","(jobs)",""],["run_remote_command","HelperFunctions","HelperFunctions.html#method-c-run_remote_command","(ip, command, public_key_loc, want_output)",""],["run_task","NeptuneManager","NeptuneManager.html#method-i-run_task","(job_data)",""],["run_task","TaskEngine","TaskEngine.html#method-i-run_task","(job_data)",""],["run_via_engine","NeptuneManager","NeptuneManager.html#method-i-run_via_engine","(engine, job_data)","<p>Tasks may also be run via remote engines - that is, they may have an\ninternal queue but definitely have …\n"],["run_via_executor","NeptuneManager","NeptuneManager.html#method-i-run_via_executor","(engine, job_data)","<p>Tasks can be run via our task executor, which will run tasks within\nAppScale and store task data in a …\n"],["s3_bucket_exists?","DatastoreS3","DatastoreS3.html#method-i-s3_bucket_exists-3F","(bucket)","<p>Queries Amazon S3 with the given connection to see if the user owns the\nnamed bucket.\n"],["save_output","NeptuneManager","NeptuneManager.html#method-c-save_output","(remote_output, local_output, job_data)",""],["save_output_to_local_fs","TaskEngine","TaskEngine.html#method-i-save_output_to_local_fs","(job_data)",""],["scp_file","HelperFunctions","HelperFunctions.html#method-c-scp_file","(local_file_loc, remote_file_loc, target_ip, private_key_loc)",""],["serialize","DjinnJobData","DjinnJobData.html#method-i-serialize","()","<p>not the best name for this but basically correct\n"],["set_acl","Datastore","Datastore.html#method-i-set_acl","(path, acl)","<p>Sets the access policy for the named file, in the appropriate datastore.\n"],["set_acl","DatastoreRepo","DatastoreRepo.html#method-i-set_acl","(repo_path, acl)","<p>Sets the access policy for the given file hosted in the Repo.\n"],["set_acl","DatastoreS3","DatastoreS3.html#method-i-set_acl","(path, acl)","<p>Sets the access policy for the specified file. TODO(cgb): Need to implement\nthis and start using it. …\n"],["set_acl","NeptuneManager","NeptuneManager.html#method-i-set_acl","(job_data, secret)",""],["set_apps","AppControllerClient","AppControllerClient.html#method-i-set_apps","(app_names)",""],["set_done_loading","ZKInterface","ZKInterface.html#method-c-set_done_loading","(ip, val)","<p>Provides a convenience function that callers can use to indicate that their\nnode is done loading (if …\n"],["set_job_data_for_ip","ZKInterface","ZKInterface.html#method-c-set_job_data_for_ip","(ip, job_data)",""],["set_live_node_ephemeral_link","ZKInterface","ZKInterface.html#method-c-set_live_node_ephemeral_link","(ip)","<p>Writes the ephemeral link in ZooKeeper that represents a given node being\nalive. Callers should only …\n"],["set_max_machines_for_babel_slaves","ZKInterface","ZKInterface.html#method-c-set_max_machines_for_babel_slaves","(maximum)","<p>Writes the integer corresponding to the maximum number of nodes that should\nbe acquired (whether they …\n"],["set_parameters","AppControllerClient","AppControllerClient.html#method-i-set_parameters","(locations, creds, apps_to_start)",""],["set_roles","DjinnJobData","DjinnJobData.html#method-i-set_roles","(roles)",""],["set_time_info","DjinnJobData","DjinnJobData.html#method-i-set_time_info","(creation_time, destruction_time)",""],["shell","HelperFunctions","HelperFunctions.html#method-c-shell","(cmd)",""],["should_destroy?","DjinnJobData","DjinnJobData.html#method-i-should_destroy-3F","()",""],["should_extend?","DjinnJobData","DjinnJobData.html#method-i-should_extend-3F","()",""],["size","TaskQueueAzureQueue","TaskQueueAzureQueue.html#method-i-size","()","<p>returns the number of messages in the queue\n"],["size","TaskQueueGoogleAppEngine","TaskQueueGoogleAppEngine.html#method-i-size","()","<p>returns the number of messages in the queue Our App Engine app has a\nspecial route just for this, with …\n"],["size","TaskQueueRabbitMQ","TaskQueueRabbitMQ.html#method-i-size","()","<p>returns the number of messages in the queue\n"],["size","TaskQueueSQS","TaskQueueSQS.html#method-i-size","()","<p>Returns the number of messages in the queue, which in SQS is the number of\nvisible messages (there should …\n"],["sleep_until_port_is_open","HelperFunctions","HelperFunctions.html#method-c-sleep_until_port_is_open","(ip, port, use_ssl=DONT_USE_SSL)",""],["spawn_babel_slaves","NeptuneManager","NeptuneManager.html#method-i-spawn_babel_slaves","(num_of_waiting_tasks)","<p>A Babel master can call this method to add more workers (Babel slaves) to\nthe system as needed.\n"],["spawn_nodes_for_neptune?","NeptuneManager","NeptuneManager.html#method-i-spawn_nodes_for_neptune-3F","(job_data)",""],["spawn_vms","InfrastructureManagerClient","InfrastructureManagerClient.html#method-i-spawn_vms","(num_vms, creds, job, cloud)",""],["start","NeptuneManager","NeptuneManager.html#method-i-start","()",""],["start_babel_master","NeptuneManager","NeptuneManager.html#method-i-start_babel_master","()","<p>The nodes that runs as a babel_master is a master in the system. It decides\nwhen to spawn new workers, …\n"],["start_babel_slave","NeptuneManager","NeptuneManager.html#method-i-start_babel_slave","()","<p>Nodes that run as babel_slaves are workers in the system. They ask the\nmaster what queues tasks are stored …\n"],["start_job","NeptuneManager","NeptuneManager.html#method-i-start_job","(jobs, secret)",""],["start_job_roles","NeptuneManager","NeptuneManager.html#method-i-start_job_roles","(nodes, job_data)",""],["status","AppControllerClient","AppControllerClient.html#method-i-status","(print_output=true)",""],["stop_app","AppControllerClient","AppControllerClient.html#method-i-stop_app","(app_name)",""],["stop_babel_master","NeptuneManager","NeptuneManager.html#method-i-stop_babel_master","()",""],["stop_babel_slave","NeptuneManager","NeptuneManager.html#method-i-stop_babel_slave","()",""],["stop_job_roles","NeptuneManager","NeptuneManager.html#method-i-stop_job_roles","(nodes, job_data)",""],["terminate_instances","InfrastructureManagerClient","InfrastructureManagerClient.html#method-i-terminate_instances","(parameters)",""],["to_hash","DjinnJobData","DjinnJobData.html#method-i-to_hash","()","<p>Produces a Hash that contains all the information contained in this object.\n"],["to_hash","NeptuneJobData","NeptuneJobData.html#method-i-to_hash","()",""],["to_s","DjinnJobData","DjinnJobData.html#method-i-to_s","()",""],["to_s","NeptuneJobData","NeptuneJobData.html#method-i-to_s","()","<p>Returns a string version of this object’s info. Since to_hash already\ndoes this in hash form, just use …\n"],["to_s","TaskEngine","TaskEngine.html#method-i-to_s","()",""],["to_s","TaskQueue","TaskQueue.html#method-i-to_s","()","<p>Returns a human-readable representation of this queue’s name and\ncredentials, typically used for logging …\n"],["to_s","TaskQueueAzureQueue","TaskQueueAzureQueue.html#method-i-to_s","()","<p>returns a string representation of this queue, which is just the queue name\nand the credentials TODO(cgb): …\n"],["to_s","TaskQueueGoogleAppEngine","TaskQueueGoogleAppEngine.html#method-i-to_s","()","<p>returns a string representation of this queue, which is just the queue name\nand the credentials TODO(cgb): …\n"],["to_s","TaskQueueRabbitMQ","TaskQueueRabbitMQ.html#method-i-to_s","()","<p>returns a string representation of this queue, which is just the queue name\nand the credentials TODO(cgb): …\n"],["to_s","TaskQueueSQS","TaskQueueSQS.html#method-i-to_s","()","<p>returns a string representation of this queue, which is just the queue name\nand the credentials TODO(cgb): …\n"],["total_time","NeptuneJobData","NeptuneJobData.html#method-i-total_time","()",""],["touch_lock_file","NeptuneManager","NeptuneManager.html#method-i-touch_lock_file","(job_data)",""],["uncompress_file","NeptuneManager","NeptuneManager.html#method-i-uncompress_file","(tar)",""],["update","AppControllerClient","AppControllerClient.html#method-i-update","(app_names)",""],["update_ips_timestamp","ZKInterface","ZKInterface.html#method-c-update_ips_timestamp","()","<p>Updates the timestamp in the IP_LIST file, to let other nodes know that an\nupdate has been made and that …\n"],["upload_app","TaskEngine","TaskEngine.html#method-i-upload_app","(job_data, app_location)",""],["upload_app","TaskEngineAppScale","TaskEngineAppScale.html#method-i-upload_app","(job_data, app_location)","<p>To upload an app to AppScale, just use the AppScale tools TODO(cgb): use\nthe tools as a RubyGem instead …\n"],["upload_app","TaskEngineGoogleAppEngine","TaskEngineGoogleAppEngine.html#method-c-upload_app","(job_data, app_location)",""],["upload_app","TaskEngineGoogleAppEngine","TaskEngineGoogleAppEngine.html#method-i-upload_app","(job_data, app_location)",""],["valid_secret?","NeptuneManager","NeptuneManager.html#method-i-valid_secret-3F","(secret)",""],["validate_environment","NeptuneManager","NeptuneManager.html#method-i-validate_environment","(job_data, secret)",""],["wait_for_allotted_time","NeptuneManager","NeptuneManager.html#method-i-wait_for_allotted_time","(job_data)","<p>When spawning up nodes to use for AppScale, we force the user to specify\nhow long the nodes should live …\n"],["wait_for_app_to_start_serving","TaskQueueGoogleAppEngine","TaskQueueGoogleAppEngine.html#method-i-wait_for_app_to_start_serving","()",""],["wait_for_node_to_be","AppControllerClient","AppControllerClient.html#method-i-wait_for_node_to_be","(new_roles)",""],["wait_for_task_to_finish","TaskEngine","TaskEngine.html#method-i-wait_for_task_to_finish","(job_data, task_id)",""],["write_appcontroller_state","ZKInterface","ZKInterface.html#method-c-write_appcontroller_state","(state)",""],["write_babel_outputs","NeptuneManager","NeptuneManager.html#method-c-write_babel_outputs","(output, error, job_data)","<p>Writes the stdout and stderr that a Babel task produces to the remote\ndatastore that the user has specified …\n"],["write_file","HelperFunctions","HelperFunctions.html#method-c-write_file","(location, contents)",""],["write_job_output","NeptuneManager","NeptuneManager.html#method-i-write_job_output","(job_data, output_location)",""],["write_job_output_handler","NeptuneManager","NeptuneManager.html#method-i-write_job_output_handler","(job_data, output, is_file)",""],["write_job_output_str","NeptuneManager","NeptuneManager.html#method-i-write_job_output_str","(job_data, string)",""],["write_json_file","HelperFunctions","HelperFunctions.html#method-c-write_json_file","(location, contents)",""],["write_node_information","ZKInterface","ZKInterface.html#method-c-write_node_information","(node, done_loading)","<p>Creates files in ZooKeeper that relate to a given AppController’s role\ninformation, so that other AppControllers …\n"],["write_remote_file_from_local_file","Datastore","Datastore.html#method-i-write_remote_file_from_local_file","(remote_path, local_path)","<p>Writes the contents of a file on the local filesystem to the remote\ndatastore.\n"],["write_remote_file_from_local_file","DatastoreRepo","DatastoreRepo.html#method-i-write_remote_file_from_local_file","(repo_path, local_path)","<p>Writes the contents of the given file to a file hosted in the Repo. If the\ngiven file is a directory, …\n"],["write_remote_file_from_local_file","DatastoreS3","DatastoreS3.html#method-i-write_remote_file_from_local_file","(s3_path, local_path)","<p>Writes a file in S3 from either a locally-specified file or from a string\ngiven to us. If the file is …\n"],["write_remote_file_from_local_file","DatastoreWAZStorage","DatastoreWAZStorage.html#method-i-write_remote_file_from_local_file","(remote_path, local_path)",""],["write_remote_file_from_string","Datastore","Datastore.html#method-i-write_remote_file_from_string","(remote_path, string)","<p>Writes the contents of a string to the remote datastore.\n"],["write_remote_file_from_string","DatastoreRepo","DatastoreRepo.html#method-i-write_remote_file_from_string","(repo_path, string)","<p>Writes the contents of the given string to a file hosted in the Repo.\n"],["write_remote_file_from_string","DatastoreS3","DatastoreS3.html#method-i-write_remote_file_from_string","(s3_path, string)","<p>Writes a string to a file in S3.\n"],["write_remote_file_from_string","DatastoreWAZStorage","DatastoreWAZStorage.html#method-i-write_remote_file_from_string","(remote_path, string)","<p>Writes a string to a Blob in Windows Azure Blob Storage. TODO(cgb): This\nassumes the string is plaintext …\n"],["write_remote_file_with_container","DatastoreWAZStorage","DatastoreWAZStorage.html#method-i-write_remote_file_with_container","(remote_path, local_path, container)",""]]}}