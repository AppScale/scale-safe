var search_data = {"index":{"searchIndex":["appcontrollerclient","appscaleexception","badconfigurationexception","blobserver","collectd","cronhelper","djinn","djinnjobdata","djinnserver","ejabberd","failedzookeeperoperationexception","godinterface","haproxy","helperfunctions","infrastructuremanagerclient","jsonclient","loadbalancer","monitoring","neptunemanagerclient","nginx","object","pbserver","rabbitmq","repo","userappclient","zkinterface","add_app_entry()","add_app_instance()","add_appserver_process()","add_instance()","add_ip_to_ip_list()","add_role()","add_role()","add_roles()","add_roles_to_node()","app_listen_port()","app_listen_port()","application_port()","backup_appcontroller_state()","blob_script()","change_job()","change_password()","check_config()","clear_crontab()","clear_monitoring_data()","clear_online_users()","clear_sites_enabled()","clear_sites_enabled()","clear_sites_enabled()","commit_new_app()","commit_new_app_name()","commit_new_user()","commit_tar()","convert_fqdn_to_ip()","convert_fqdns_to_ips()","convert_location_array_to_class()","convert_location_class_to_array()","copy_app_to_local()","copy_encryption_keys()","create_app_config()","create_app_config()","create_app_load_balancer_config()","create_app_load_balancer_config()","create_app_monitoring_config()","create_app_monitoring_config()","create_appscale_security_group()","create_pbserver_config()","create_pbserver_config()","delete_app()","delete_instance()","describe_instances()","deserialize()","deserialize_info_from_tools()","djinn_locations()","does_app_exist?()","does_app_need_receive?()","does_image_have_location?()","does_user_exist?()","done_uploading()","encrypt_password()","ensure_all_roles_are_running()","ensure_db_is_supported()","ensure_image_is_appscale()","erase_local_files()","expires_duration()","extend_time()","find_majority_item()","find_me_in_locations()","generate_location_config()","generate_makefile()","generate_ssh_key()","get_all_appengine_nodes()","get_all_apps()","get_all_public_ips()","get_all_public_ips()","get_all_users()","get_app_data()","get_app_hosters()","get_app_instances_for_ip()","get_app_path()","get_appcontroller_lock()","get_appcontroller_state()","get_appscale_id()","get_cache_path()","get_cert()","get_cloud_admin()","get_cloud_ips()","get_db_master()","get_db_master_ip()","get_db_slave_ips()","get_executable_name()","get_failed_nodes()","get_hosts_for_app()","get_hybrid_ips()","get_ip_info()","get_ips()","get_job_data_for_ip()","get_key()","get_load_balancer_ip()","get_login()","get_max_machines_for_babel_slaves()","get_nearest_db_ip()","get_num_cpus()","get_online_users_list()","get_optimal_spot_price()","get_public_ip()","get_public_ip()","get_public_ips()","get_queues_in_use()","get_random_alphanumeric()","get_relative_filename()","get_remote_appscale_home()","get_role_info()","get_scaling_info_for_app()","get_secret()","get_server_ports()","get_shadow()","get_stats()","get_stats()","get_status()","get_status()","get_tar()","get_untar_dir()","get_usage()","get_user_data()","get_userappserver_ip()","got_all_data()","init()","init()","init_to_ip()","initialize_config()","initialize_config()","initialize_config()","initialize_node()","initialize_nodes_in_parallel()","initialize_scaling_info_for_app()","initialize_server()","is_app_running()","is_app_uploaded?()","is_cloud?()","is_cpu_or_mem_maxed_out?()","is_done_initializing()","is_done_initializing?()","is_done_loading()","is_done_loading?()","is_hybrid_cloud?()","is_node_done_loading?()","is_node_live?()","is_port_open?()","is_running()","is_running()","is_running?()","is_running?()","is_running?()","is_user_cloud_admin?()","job()","job_start()","kill()","kill_process()","listen_port()","listen_port()","listen_ssl_port()","load_neptune_info()","local_ip()","lock_and_run()","log_debug()","log_obscured_env()","log_run()","log_to_buffer()","log_to_stdout()","make_call()","make_call()","make_call()","method_missing()","my_node()","name()","name()","name()","neptune_parse_creds()","new()","new()","new()","new()","new()","obscure_array()","obscure_creds()","obscure_string()","on_init()","parse_creds()","parse_static_data()","perform_scaling_for_appservers()","post_logs_to_sisyphus()","proxy_port()","proxy_port()","public_directory()","public_directory()","read_file()","read_json_file()","regenerate_config()","reinitialize()","release_appcontroller_lock()","reload()","reload()","reload_nginx()","remove()","remove_app()","remove_app()","remove_app()","remove_app_entry()","remove_appserver_process()","remove_ip_from_ip_list()","remove_node_from_local_and_zookeeper()","remove_node_information()","remove_role()","remove_role()","remove_roles()","remove_roles_from_node()","reset()","restart()","restart()","restart()","restart()","restart()","restart()","restart()","restore_appcontroller_state()","restore_db_state_if_needed()","restore_from_db?()","rsync_files()","run_app()","run_instances()","run_neptune_in_cloud?()","run_neptune_job()","run_remote_command()","sanitize_credentials()","scale_appservers()","scp_file()","send_logs_to_sisyphus()","serialize()","server_config()","server_ports()","server_ports()","server_ports()","set_apps()","set_apps()","set_creds_in_env()","set_done_loading()","set_job_data_for_ip()","set_live_node_ephemeral_link()","set_max_machines_for_babel_slaves()","set_parameters()","set_parameters()","set_roles()","set_time_info()","set_uaserver_ips()","setup_app()","setup_config_files()","setup_hadoop_config_org()","shell()","shorten_to_n_items()","should_destroy?()","should_extend?()","shutdown()","sleep_until_port_is_closed()","sleep_until_port_is_open()","spawn_and_setup_appengine()","spawn_appengine()","spawn_hybrid_vms()","spawn_vms()","spawn_vms()","start()","start()","start()","start()","start()","start()","start()","start()","start_appcontroller()","start_appengine()","start_blobstore_server()","start_ejabberd()","start_god()","start_hadoop_org()","start_infrastructure_manager()","start_load_balancer()","start_master()","start_memcache()","start_neptune_manager()","start_new_roles_on_nodes()","start_open()","start_pbserver()","start_rabbitmq_master()","start_rabbitmq_slave()","start_shadow()","start_sisyphus()","start_slave()","start_soap_server()","start_xmpp_for_app()","status()","status()","stop()","stop()","stop()","stop()","stop()","stop()","stop()","stop()","stop()","stop()","stop()","stop_app()","stop_app()","stop_app()","stop_appengine()","stop_blob_server()","stop_ejabberd()","stop_infrastructure_manager()","stop_load_balancer()","stop_memcache()","stop_neptune_manager()","stop_open()","stop_pbserver()","stop_shadow()","stop_sisyphus()","stop_soap_server()","terminate_all_vms()","terminate_hybrid_vms()","terminate_instances()","terminate_vms()","to_hash()","to_s()","try_to_scale_down()","try_to_scale_up()","update()","update()","update_api_status()","update_app_config()","update_cron()","update_ips_timestamp()","update_local_nodes()","valid_format_for_credentials()","valid_secret?()","validate_image()","wait_for_data()","wait_for_node_to_be()","wait_for_nodes_to_finish_loading()","write_app_config()","write_app_config()","write_app_config()","write_appcontroller_state()","write_auth_script()","write_cloud_info()","write_config_file()","write_cookie()","write_database_info()","write_file()","write_fullproxy_app_config()","write_hypersoap()","write_json_file()","write_neptune_info()","write_node_information()","write_online_users_list()","write_our_node_info()","write_zookeeper_locations()"],"longSearchIndex":["appcontrollerclient","appscaleexception","badconfigurationexception","blobserver","collectd","cronhelper","djinn","djinnjobdata","djinnserver","ejabberd","failedzookeeperoperationexception","godinterface","haproxy","helperfunctions","infrastructuremanagerclient","jsonclient","loadbalancer","monitoring","neptunemanagerclient","nginx","object","pbserver","rabbitmq","repo","userappclient","zkinterface","zkinterface::add_app_entry()","zkinterface::add_app_instance()","djinn#add_appserver_process()","userappclient#add_instance()","zkinterface::add_ip_to_ip_list()","appcontrollerclient#add_role()","djinn#add_role()","djinnjobdata#add_roles()","zkinterface::add_roles_to_node()","haproxy::app_listen_port()","nginx::app_listen_port()","helperfunctions::application_port()","djinn#backup_appcontroller_state()","blobserver::blob_script()","djinn#change_job()","userappclient#change_password()","nginx::check_config()","cronhelper::clear_crontab()","collectd::clear_monitoring_data()","ejabberd::clear_online_users()","collectd::clear_sites_enabled()","haproxy::clear_sites_enabled()","nginx::clear_sites_enabled()","userappclient#commit_new_app()","userappclient#commit_new_app_name()","userappclient#commit_new_user()","userappclient#commit_tar()","helperfunctions::convert_fqdn_to_ip()","djinn#convert_fqdns_to_ips()","djinn::convert_location_array_to_class()","djinn::convert_location_class_to_array()","djinn#copy_app_to_local()","djinn#copy_encryption_keys()","haproxy::create_app_config()","nginx::create_app_config()","haproxy::create_app_load_balancer_config()","nginx::create_app_load_balancer_config()","haproxy::create_app_monitoring_config()","nginx::create_app_monitoring_config()","helperfunctions::create_appscale_security_group()","haproxy::create_pbserver_config()","nginx::create_pbserver_config()","userappclient#delete_app()","userappclient#delete_instance()","infrastructuremanagerclient#describe_instances()","djinnjobdata::deserialize()","helperfunctions::deserialize_info_from_tools()","djinnserver#djinn_locations()","userappclient#does_app_exist?()","ejabberd::does_app_need_receive?()","helperfunctions::does_image_have_location?()","userappclient#does_user_exist?()","djinn#done_uploading()","helperfunctions::encrypt_password()","djinn#ensure_all_roles_are_running()","helperfunctions::ensure_db_is_supported()","helperfunctions::ensure_image_is_appscale()","rabbitmq::erase_local_files()","helperfunctions::expires_duration()","djinnjobdata#extend_time()","helperfunctions::find_majority_item()","djinn#find_me_in_locations()","helperfunctions::generate_location_config()","helperfunctions::generate_makefile()","helperfunctions::generate_ssh_key()","djinn#get_all_appengine_nodes()","userappclient#get_all_apps()","appcontrollerclient#get_all_public_ips()","djinn#get_all_public_ips()","userappclient#get_all_users()","userappclient#get_app_data()","zkinterface::get_app_hosters()","zkinterface::get_app_instances_for_ip()","helperfunctions::get_app_path()","zkinterface::get_appcontroller_lock()","zkinterface::get_appcontroller_state()","helperfunctions::get_appscale_id()","helperfunctions::get_cache_path()","helperfunctions::get_cert()","userappclient#get_cloud_admin()","helperfunctions::get_cloud_ips()","djinn#get_db_master()","djinn::get_db_master_ip()","djinn::get_db_slave_ips()","pbserver::get_executable_name()","zkinterface::get_failed_nodes()","userappclient#get_hosts_for_app()","helperfunctions::get_hybrid_ips()","zkinterface::get_ip_info()","helperfunctions::get_ips()","zkinterface::get_job_data_for_ip()","helperfunctions::get_key()","djinn#get_load_balancer_ip()","djinn#get_login()","zkinterface::get_max_machines_for_babel_slaves()","djinn::get_nearest_db_ip()","helperfunctions::get_num_cpus()","djinn#get_online_users_list()","helperfunctions::get_optimal_spot_price()","djinn#get_public_ip()","repo::get_public_ip()","helperfunctions::get_public_ips()","appcontrollerclient#get_queues_in_use()","helperfunctions::get_random_alphanumeric()","helperfunctions::get_relative_filename()","helperfunctions::get_remote_appscale_home()","djinn#get_role_info()","djinn#get_scaling_info_for_app()","helperfunctions::get_secret()","pbserver::get_server_ports()","djinn#get_shadow()","appcontrollerclient#get_stats()","djinn#get_stats()","appcontrollerclient#get_status()","djinn#get_status()","userappclient#get_tar()","helperfunctions::get_untar_dir()","helperfunctions::get_usage()","userappclient#get_user_data()","appcontrollerclient#get_userappserver_ip()","djinn#got_all_data()","repo::init()","zkinterface::init()","zkinterface::init_to_ip()","collectd::initialize_config()","haproxy::initialize_config()","nginx::initialize_config()","djinn#initialize_node()","djinn#initialize_nodes_in_parallel()","djinn#initialize_scaling_info_for_app()","djinn#initialize_server()","djinn#is_app_running()","userappclient#is_app_uploaded?()","djinn#is_cloud?()","djinn#is_cpu_or_mem_maxed_out?()","djinn#is_done_initializing()","appcontrollerclient#is_done_initializing?()","djinn#is_done_loading()","appcontrollerclient#is_done_loading?()","djinn#is_hybrid_cloud?()","zkinterface::is_node_done_loading?()","zkinterface::is_node_live?()","helperfunctions::is_port_open?()","blobserver::is_running()","pbserver::is_running()","djinn#is_running?()","haproxy::is_running?()","nginx::is_running?()","userappclient#is_user_cloud_admin?()","djinnserver#job()","djinn#job_start()","djinn#kill()","helperfunctions::kill_process()","loadbalancer::listen_port()","monitoring::listen_port()","loadbalancer::listen_ssl_port()","djinn#load_neptune_info()","helperfunctions::local_ip()","zkinterface::lock_and_run()","djinn::log_debug()","helperfunctions::log_obscured_env()","djinn::log_run()","djinn::log_to_buffer()","djinn::log_to_stdout()","appcontrollerclient#make_call()","infrastructuremanagerclient#make_call()","userappclient#make_call()","djinnjobdata#method_missing()","djinn#my_node()","blobserver::name()","loadbalancer::name()","monitoring::name()","djinn::neptune_parse_creds()","appcontrollerclient::new()","djinn::new()","djinnjobdata::new()","infrastructuremanagerclient::new()","userappclient::new()","helperfunctions::obscure_array()","helperfunctions::obscure_creds()","helperfunctions::obscure_string()","djinnserver#on_init()","djinn#parse_creds()","helperfunctions::parse_static_data()","djinn#perform_scaling_for_appservers()","djinn#post_logs_to_sisyphus()","loadbalancer::proxy_port()","monitoring::proxy_port()","loadbalancer::public_directory()","monitoring::public_directory()","helperfunctions::read_file()","helperfunctions::read_json_file()","haproxy::regenerate_config()","zkinterface::reinitialize()","zkinterface::release_appcontroller_lock()","haproxy::reload()","nginx::reload()","nginx::reload_nginx()","godinterface::remove()","collectd::remove_app()","haproxy::remove_app()","nginx::remove_app()","zkinterface::remove_app_entry()","djinn#remove_appserver_process()","zkinterface::remove_ip_from_ip_list()","djinn#remove_node_from_local_and_zookeeper()","zkinterface::remove_node_information()","appcontrollerclient#remove_role()","djinn#remove_role()","djinnjobdata#remove_roles()","zkinterface::remove_roles_from_node()","monitoring::reset()","blobserver::restart()","collectd::restart()","haproxy::restart()","loadbalancer::restart()","monitoring::restart()","nginx::restart()","pbserver::restart()","djinn#restore_appcontroller_state()","djinn#restore_db_state_if_needed()","djinn#restore_from_db?()","djinn#rsync_files()","helperfunctions::run_app()","infrastructuremanagerclient#run_instances()","djinn#run_neptune_in_cloud?()","appcontrollerclient#run_neptune_job()","helperfunctions::run_remote_command()","djinn#sanitize_credentials()","djinn#scale_appservers()","helperfunctions::scp_file()","djinn#send_logs_to_sisyphus()","djinnjobdata#serialize()","haproxy::server_config()","blobserver::server_ports()","loadbalancer::server_ports()","monitoring::server_ports()","appcontrollerclient#set_apps()","djinn#set_apps()","helperfunctions::set_creds_in_env()","zkinterface::set_done_loading()","zkinterface::set_job_data_for_ip()","zkinterface::set_live_node_ephemeral_link()","zkinterface::set_max_machines_for_babel_slaves()","appcontrollerclient#set_parameters()","djinn#set_parameters()","djinnjobdata#set_roles()","djinnjobdata#set_time_info()","djinn#set_uaserver_ips()","helperfunctions::setup_app()","djinn#setup_config_files()","djinn#setup_hadoop_config_org()","helperfunctions::shell()","helperfunctions::shorten_to_n_items()","djinnjobdata#should_destroy?()","djinnjobdata#should_extend?()","godinterface::shutdown()","helperfunctions::sleep_until_port_is_closed()","helperfunctions::sleep_until_port_is_open()","djinn#spawn_and_setup_appengine()","djinn#spawn_appengine()","helperfunctions::spawn_hybrid_vms()","helperfunctions::spawn_vms()","infrastructuremanagerclient#spawn_vms()","blobserver::start()","ejabberd::start()","godinterface::start()","loadbalancer::start()","monitoring::start()","nginx::start()","pbserver::start()","repo::start()","djinn#start_appcontroller()","djinn#start_appengine()","djinn#start_blobstore_server()","djinn#start_ejabberd()","godinterface::start_god()","djinn#start_hadoop_org()","djinn#start_infrastructure_manager()","djinn#start_load_balancer()","rabbitmq::start_master()","djinn#start_memcache()","djinn#start_neptune_manager()","djinn#start_new_roles_on_nodes()","djinn#start_open()","djinn#start_pbserver()","djinn#start_rabbitmq_master()","djinn#start_rabbitmq_slave()","djinn#start_shadow()","djinn#start_sisyphus()","rabbitmq::start_slave()","djinn#start_soap_server()","djinn#start_xmpp_for_app()","appcontrollerclient#status()","djinn#status()","blobserver::stop()","collectd::stop()","ejabberd::stop()","godinterface::stop()","haproxy::stop()","loadbalancer::stop()","monitoring::stop()","nginx::stop()","pbserver::stop()","rabbitmq::stop()","repo::stop()","appcontrollerclient#stop_app()","djinn#stop_app()","helperfunctions::stop_app()","djinn#stop_appengine()","djinn#stop_blob_server()","djinn#stop_ejabberd()","djinn#stop_infrastructure_manager()","djinn#stop_load_balancer()","djinn#stop_memcache()","djinn#stop_neptune_manager()","djinn#stop_open()","djinn#stop_pbserver()","djinn#stop_shadow()","djinn#stop_sisyphus()","djinn#stop_soap_server()","helperfunctions::terminate_all_vms()","helperfunctions::terminate_hybrid_vms()","infrastructuremanagerclient#terminate_instances()","helperfunctions::terminate_vms()","djinnjobdata#to_hash()","djinnjobdata#to_s()","djinn#try_to_scale_down()","djinn#try_to_scale_up()","appcontrollerclient#update()","djinn#update()","djinn#update_api_status()","haproxy::update_app_config()","cronhelper::update_cron()","zkinterface::update_ips_timestamp()","djinn#update_local_nodes()","djinn#valid_format_for_credentials()","djinn#valid_secret?()","djinn#validate_image()","djinn#wait_for_data()","appcontrollerclient#wait_for_node_to_be()","djinn#wait_for_nodes_to_finish_loading()","collectd::write_app_config()","haproxy::write_app_config()","nginx::write_app_config()","zkinterface::write_appcontroller_state()","ejabberd::write_auth_script()","djinn#write_cloud_info()","ejabberd::write_config_file()","rabbitmq::write_cookie()","djinn#write_database_info()","helperfunctions::write_file()","nginx::write_fullproxy_app_config()","djinn#write_hypersoap()","helperfunctions::write_json_file()","djinn#write_neptune_info()","zkinterface::write_node_information()","ejabberd::write_online_users_list()","djinn#write_our_node_info()","djinn#write_zookeeper_locations()"],"info":[["AppControllerClient","","AppControllerClient.html","","<p>A client that uses SOAP messages to communicate with the underlying cloud\nplatform (here, AppScale). …\n"],["AppScaleException","","AppScaleException.html","",""],["BadConfigurationException","","BadConfigurationException.html","","<p>BadConfigurationExceptions represent an exception that can be thrown by the\nAppController or any other …\n"],["BlobServer","","BlobServer.html","","<p>To support the Google App Engine Blobstore API, we have a custom server\nthat handles Blobstore API requests, …\n"],["Collectd","","Collectd.html","","<p>A class that abstracts away interactions with collectd, the open source\nsystem statistics collection …\n"],["CronHelper","","CronHelper.html","","<p>A module that abstracts away interactions with our implementation of the\nGoogle App Engine Cron API. …\n"],["Djinn","","Djinn.html","","<p>Djinn (interchangeably known as ‘the AppController’) automatically\nconfigures and deploys all services …\n"],["DjinnJobData","","DjinnJobData.html","","<p>A class that represents a single node running in AppScale. It provides\nmethods to easily see the IP address …\n"],["DjinnServer","","DjinnServer.html","","<p>DjinnServer is a wrapper around Djinn that adds SOAP capabilities to it.\n"],["Ejabberd","","Ejabberd.html","","<p>Our implementation of the Google App Engine XMPP and Channel APIs uses the\nopen source ejabberd server. …\n"],["FailedZooKeeperOperationException","","FailedZooKeeperOperationException.html","","<p>A class of exceptions that we throw whenever we perform a ZooKeeper\noperation that does not return successfully …\n"],["GodInterface","","GodInterface.html","","<p>Most daemons within AppScale aren’t fault-tolerant, so to make them\nfault-tolerant, we use the open source …\n"],["HAProxy","","HAProxy.html","","<p>As AppServers within AppScale are usually single-threaded, we run multiple\ncopies of them and load balance …\n"],["HelperFunctions","","HelperFunctions.html","","<p>HelperFunctions holds miscellaneous functions - functions that really\naren’t bound to a particular service, …\n"],["InfrastructureManagerClient","","InfrastructureManagerClient.html","",""],["JSONClient","","JSONClient.html","","<p>A HTTP client that assumes that responses returned are JSON, and\nautomatically loads them, returning …\n"],["LoadBalancer","","LoadBalancer.html","","<p>As we can’t rely on DNS in AppScale, we have a Rails app, called the\nAppLoadBalancer, that provides a …\n"],["Monitoring","","Monitoring.html","","<p>Monitr is a Ruby on Rails application that displays system information\nwritten by collectd. This module …\n"],["NeptuneManagerClient","","NeptuneManagerClient.html","","<p>An interface that callers can use to interact with the NeptuneManager, a\nprocess that automates the configuration …\n"],["Nginx","","Nginx.html","","<p>A module to wrap all the interactions with the nginx web server Google App\nEngine applications can request …\n"],["Object","","Object.html","",""],["PbServer","","PbServer.html","","<p>To support the Google App Engine Datastore API in a way that is\ndatabase-agnostic, App Engine applications …\n"],["RabbitMQ","","RabbitMQ.html","","<p>To implement support for the Google App Engine Task Queue API, we use the\nopen source rabbitmq server. …\n"],["Repo","","Repo.html","","<p>Neptune jobs need to store and retrieve data within AppScale, so we have a\nspecial Google App Engine …\n"],["UserAppClient","","UserAppClient.html","","<p>AppControllers and other services need to read or write data relating to\nusers and applications hosted …\n"],["ZKInterface","","ZKInterface.html","","<p>The AppController employs the open source software ZooKeeper as a highly\navailable naming service, to …\n"],["add_app_entry","ZKInterface","ZKInterface.html#method-c-add_app_entry","(appname, ip, location)",""],["add_app_instance","ZKInterface","ZKInterface.html#method-c-add_app_instance","(app_name, ip, port)","<p>Adds an entry to ZooKeeper for the given IP, storing information about the\nGoogle App engine application …\n"],["add_appserver_process","Djinn","Djinn.html#method-i-add_appserver_process","(app)","<p>Starts a new AppServer for the given application. TODO(cgb): This is mostly\ncopy-pasta’d from start_appengine …\n"],["add_instance","UserAppClient","UserAppClient.html#method-i-add_instance","(appname, host, port, retry_on_except=true)",""],["add_ip_to_ip_list","ZKInterface","ZKInterface.html#method-c-add_ip_to_ip_list","(ip)","<p>Add the given IP to the list of IPs that we store in ZooKeeper. If the IPs\nfile doesn’t exist in ZooKeeper …\n"],["add_role","AppControllerClient","AppControllerClient.html#method-i-add_role","(role)",""],["add_role","Djinn","Djinn.html#method-i-add_role","(new_role, secret)",""],["add_roles","DjinnJobData","DjinnJobData.html#method-i-add_roles","(roles)",""],["add_roles_to_node","ZKInterface","ZKInterface.html#method-c-add_roles_to_node","(roles, node)","<p>Adds the specified role to the given node in ZooKeeper. A node can call\nthis function to add a role to …\n"],["app_listen_port","HAProxy","HAProxy.html#method-c-app_listen_port","(app_number)","<p>The port that the load balancer will be listening on for the given app\nnumber\n"],["app_listen_port","Nginx","Nginx.html#method-c-app_listen_port","(app_number)","<p>The port that nginx will be listen on for the given app number\n"],["application_port","HelperFunctions","HelperFunctions.html#method-c-application_port","(app_number, index, num_of_servers)","<p>Determine the port that the given app should use\n"],["backup_appcontroller_state","Djinn","Djinn.html#method-i-backup_appcontroller_state","()",""],["blob_script","BlobServer","BlobServer.html#method-c-blob_script","()",""],["change_job","Djinn","Djinn.html#method-i-change_job","()",""],["change_password","UserAppClient","UserAppClient.html#method-i-change_password","(user, new_password, retry_on_except=true)",""],["check_config","Nginx","Nginx.html#method-c-check_config","()","<p>Return true if the configuration is good, false o.w.\n"],["clear_crontab","CronHelper","CronHelper.html#method-c-clear_crontab","()",""],["clear_monitoring_data","Collectd","Collectd.html#method-c-clear_monitoring_data","()",""],["clear_online_users","Ejabberd","Ejabberd.html#method-c-clear_online_users","()",""],["clear_sites_enabled","Collectd","Collectd.html#method-c-clear_sites_enabled","()","<p>Removes all the enabled sites\n"],["clear_sites_enabled","HAProxy","HAProxy.html#method-c-clear_sites_enabled","()","<p>Removes all the enabled sites\n"],["clear_sites_enabled","Nginx","Nginx.html#method-c-clear_sites_enabled","()","<p>Removes all the enabled sites\n"],["commit_new_app","UserAppClient","UserAppClient.html#method-i-commit_new_app","(user, app_name, language, file_location)",""],["commit_new_app_name","UserAppClient","UserAppClient.html#method-i-commit_new_app_name","(user, app_name, language, retry_on_except=true)",""],["commit_new_user","UserAppClient","UserAppClient.html#method-i-commit_new_user","(user, encrypted_password, user_type, retry_on_except=true)",""],["commit_tar","UserAppClient","UserAppClient.html#method-i-commit_tar","(app_name, file_location, retry_on_except=true)",""],["convert_fqdn_to_ip","HelperFunctions","HelperFunctions.html#method-c-convert_fqdn_to_ip","(host)","<p>In cloudy deployments, the recommended way to determine a machine’s true\nprivate IP address from its …\n"],["convert_fqdns_to_ips","Djinn","Djinn.html#method-i-convert_fqdns_to_ips","()","<p>If running in a cloud environment, we may be dealing with public and\nprivate FQDNs instead of IP addresses, …\n"],["convert_location_array_to_class","Djinn","Djinn.html#method-c-convert_location_array_to_class","(nodes, keyname)","<p>This method converts an Array of Strings (where each String contains all\nthe information about a single …\n"],["convert_location_class_to_array","Djinn","Djinn.html#method-c-convert_location_class_to_array","(djinn_locations)","<p>This method is the opposite of the previous method, and is needed when an\nAppController wishes to pass …\n"],["copy_app_to_local","Djinn","Djinn.html#method-i-copy_app_to_local","(appname)","<p>Returns true on success, false otherwise\n"],["copy_encryption_keys","Djinn","Djinn.html#method-i-copy_encryption_keys","(dest_node)",""],["create_app_config","HAProxy","HAProxy.html#method-c-create_app_config","(my_public_ip, my_private_ip, listen_port, server_ports, name)","<p>A generic function for creating haproxy config files used by appscale\nservices\n"],["create_app_config","Nginx","Nginx.html#method-c-create_app_config","(my_public_ip, my_private_ip, proxy_port, listen_port, name, public_dir, ssl_port=nil)","<p>A generic function for creating nginx config files used by appscale\nservices\n"],["create_app_load_balancer_config","HAProxy","HAProxy.html#method-c-create_app_load_balancer_config","(my_public_ip, my_private_ip, listen_port)","<p>Create the configuration file for the AppLoadBalancer Rails application\n"],["create_app_load_balancer_config","Nginx","Nginx.html#method-c-create_app_load_balancer_config","(my_public_ip, my_private_ip, proxy_port)","<p>Create the configuration file for the AppLoadBalancer Rails application\n"],["create_app_monitoring_config","HAProxy","HAProxy.html#method-c-create_app_monitoring_config","(my_public_ip, my_private_ip, listen_port)","<p>Create the configuration file for the AppMonitoring Rails application\n"],["create_app_monitoring_config","Nginx","Nginx.html#method-c-create_app_monitoring_config","(my_public_ip, my_private_ip, proxy_port)","<p>Create the configuration file for the AppMonitoring Rails application\n"],["create_appscale_security_group","HelperFunctions","HelperFunctions.html#method-c-create_appscale_security_group","(infrastructure, group)",""],["create_pbserver_config","HAProxy","HAProxy.html#method-c-create_pbserver_config","(my_ip, listen_port, table)","<p>Create the config file for PBServer applications\n"],["create_pbserver_config","Nginx","Nginx.html#method-c-create_pbserver_config","(my_ip, proxy_port)","<p>Create the configuration file for the pbserver\n"],["delete_app","UserAppClient","UserAppClient.html#method-i-delete_app","(app, retry_on_except=true)",""],["delete_instance","UserAppClient","UserAppClient.html#method-i-delete_instance","(appname, host, port, retry_on_except=true)",""],["describe_instances","InfrastructureManagerClient","InfrastructureManagerClient.html#method-i-describe_instances","(parameters)",""],["deserialize","DjinnJobData","DjinnJobData.html#method-c-deserialize","(serialized)",""],["deserialize_info_from_tools","HelperFunctions","HelperFunctions.html#method-c-deserialize_info_from_tools","(ips)",""],["djinn_locations","DjinnServer","DjinnServer.html#method-i-djinn_locations","()",""],["does_app_exist?","UserAppClient","UserAppClient.html#method-i-does_app_exist-3F","(app, retry_on_except=true)",""],["does_app_need_receive?","Ejabberd","Ejabberd.html#method-c-does_app_need_receive-3F","(app, lang)",""],["does_image_have_location?","HelperFunctions","HelperFunctions.html#method-c-does_image_have_location-3F","(ip, location, key)",""],["does_user_exist?","UserAppClient","UserAppClient.html#method-i-does_user_exist-3F","(user, retry_on_except=true)",""],["done_uploading","Djinn","Djinn.html#method-i-done_uploading","(appname, location, secret)",""],["encrypt_password","HelperFunctions","HelperFunctions.html#method-c-encrypt_password","(user, pass)",""],["ensure_all_roles_are_running","Djinn","Djinn.html#method-i-ensure_all_roles_are_running","()","<p>Each node has a responsibility to check up on other nodes and make sure\nthey are still running, and if …\n"],["ensure_db_is_supported","HelperFunctions","HelperFunctions.html#method-c-ensure_db_is_supported","(ip, db, key)",""],["ensure_image_is_appscale","HelperFunctions","HelperFunctions.html#method-c-ensure_image_is_appscale","(ip, key)",""],["erase_local_files","RabbitMQ","RabbitMQ.html#method-c-erase_local_files","()","<p>Erases all the files that RabbitMQ normally writes to, which can be useful\nto ensure that we start up …\n"],["expires_duration","HelperFunctions","HelperFunctions.html#method-c-expires_duration","(input_string)","<p>Parses the expiration string provided in the app.yaml and returns its\nduration in seconds\n"],["extend_time","DjinnJobData","DjinnJobData.html#method-i-extend_time","()",""],["find_majority_item","HelperFunctions","HelperFunctions.html#method-c-find_majority_item","(array)",""],["find_me_in_locations","Djinn","Djinn.html#method-i-find_me_in_locations","()","<p>Searches through @nodes to try to find out which node is ours. Strictly\nspeaking, we assume that our …\n"],["generate_location_config","HelperFunctions","HelperFunctions.html#method-c-generate_location_config","(handler)",""],["generate_makefile","HelperFunctions","HelperFunctions.html#method-c-generate_makefile","(code, input_loc)",""],["generate_ssh_key","HelperFunctions","HelperFunctions.html#method-c-generate_ssh_key","(outputLocation, name, infrastructure)",""],["get_all_appengine_nodes","Djinn","Djinn.html#method-i-get_all_appengine_nodes","()",""],["get_all_apps","UserAppClient","UserAppClient.html#method-i-get_all_apps","(retry_on_except=true)",""],["get_all_public_ips","AppControllerClient","AppControllerClient.html#method-i-get_all_public_ips","()",""],["get_all_public_ips","Djinn","Djinn.html#method-i-get_all_public_ips","(secret)",""],["get_all_users","UserAppClient","UserAppClient.html#method-i-get_all_users","(retry_on_except=true)",""],["get_app_data","UserAppClient","UserAppClient.html#method-i-get_app_data","(appname, retry_on_except=true)",""],["get_app_hosters","ZKInterface","ZKInterface.html#method-c-get_app_hosters","(appname)",""],["get_app_instances_for_ip","ZKInterface","ZKInterface.html#method-c-get_app_instances_for_ip","(ip)","<p>Returns an Array of Hashes that correspond to the App Engine applications\nhosted on the given ip address. …\n"],["get_app_path","HelperFunctions","HelperFunctions.html#method-c-get_app_path","(app_name)",""],["get_appcontroller_lock","ZKInterface","ZKInterface.html#method-c-get_appcontroller_lock","()","<p>Gets a lock that AppControllers can use to have exclusive write access\n(between other AppControllers …\n"],["get_appcontroller_state","ZKInterface","ZKInterface.html#method-c-get_appcontroller_state","()",""],["get_appscale_id","HelperFunctions","HelperFunctions.html#method-c-get_appscale_id","()",""],["get_cache_path","HelperFunctions","HelperFunctions.html#method-c-get_cache_path","(app_name)",""],["get_cert","HelperFunctions","HelperFunctions.html#method-c-get_cert","(filename)",""],["get_cloud_admin","UserAppClient","UserAppClient.html#method-i-get_cloud_admin","()","<p>This method finds the first user who is a cloud administrator. Since the\nUserAppServer doesn’t provide …\n"],["get_cloud_ips","HelperFunctions","HelperFunctions.html#method-c-get_cloud_ips","(infrastructure, keyname)",""],["get_db_master","Djinn","Djinn.html#method-i-get_db_master","()",""],["get_db_master_ip","Djinn","Djinn.html#method-c-get_db_master_ip","()",""],["get_db_slave_ips","Djinn","Djinn.html#method-c-get_db_slave_ips","()",""],["get_executable_name","PbServer","PbServer.html#method-c-get_executable_name","(table)","<p>Since we have two different versions of the Protocol Buffer Server (one\nthat’s database agnostic and …\n"],["get_failed_nodes","ZKInterface","ZKInterface.html#method-c-get_failed_nodes","()","<p>Queries ZooKeeper for a list of all IPs that are currently up, and then\nchecks if each of those IPs has …\n"],["get_hosts_for_app","UserAppClient","UserAppClient.html#method-i-get_hosts_for_app","(appname)","<p>This method returns an array of strings, each corresponding to a ip:port\nthat the given app is hosted …\n"],["get_hybrid_ips","HelperFunctions","HelperFunctions.html#method-c-get_hybrid_ips","(creds)",""],["get_ip_info","ZKInterface","ZKInterface.html#method-c-get_ip_info","()","<p>Returns a Hash containing the list of the IPs that are currently running\nwithin AppScale as well as a …\n"],["get_ips","HelperFunctions","HelperFunctions.html#method-c-get_ips","(ips)",""],["get_job_data_for_ip","ZKInterface","ZKInterface.html#method-c-get_job_data_for_ip","(ip)","<p>Returns a serialized DjinnJobData string that we store in ZooKeeper for the\ngiven IP address, which callers …\n"],["get_key","HelperFunctions","HelperFunctions.html#method-c-get_key","(filename)",""],["get_load_balancer_ip","Djinn","Djinn.html#method-i-get_load_balancer_ip","()",""],["get_login","Djinn","Djinn.html#method-i-get_login","()",""],["get_max_machines_for_babel_slaves","ZKInterface","ZKInterface.html#method-c-get_max_machines_for_babel_slaves","()","<p>Returns the maximum number of nodes that should be used to run Babel jobs\n(not including the Babel Master …\n"],["get_nearest_db_ip","Djinn","Djinn.html#method-c-get_nearest_db_ip","(is_mysql=false)",""],["get_num_cpus","HelperFunctions","HelperFunctions.html#method-c-get_num_cpus","()",""],["get_online_users_list","Djinn","Djinn.html#method-i-get_online_users_list","(secret)",""],["get_optimal_spot_price","HelperFunctions","HelperFunctions.html#method-c-get_optimal_spot_price","(instance_type)","<p>Queries Amazon EC2’s Spot Instance pricing history to see how much other\nusers have paid for the given …\n"],["get_public_ip","Djinn","Djinn.html#method-i-get_public_ip","(private_ip)",""],["get_public_ip","Repo","Repo.html#method-c-get_public_ip","()","<p>So since we can’t expose reading class variables directly, this method\nexposes just what we need - where …\n"],["get_public_ips","HelperFunctions","HelperFunctions.html#method-c-get_public_ips","(ips)",""],["get_queues_in_use","AppControllerClient","AppControllerClient.html#method-i-get_queues_in_use","()",""],["get_random_alphanumeric","HelperFunctions","HelperFunctions.html#method-c-get_random_alphanumeric","(length=10)","<p>Returns a random string composed of alphanumeric characters, as long as the\nuser requests.\n"],["get_relative_filename","HelperFunctions","HelperFunctions.html#method-c-get_relative_filename","(filename, app_name)","<p>We have the files full path (e.g. ./data/myappname/static/file.txt) but we\nwant is the files path relative …\n"],["get_remote_appscale_home","HelperFunctions","HelperFunctions.html#method-c-get_remote_appscale_home","(ip, key)",""],["get_role_info","Djinn","Djinn.html#method-i-get_role_info","(secret)","<p>A SOAP-exposed method that callers can use to get information about what\nroles each node in the AppScale …\n"],["get_scaling_info_for_app","Djinn","Djinn.html#method-i-get_scaling_info_for_app","(app_name)","<p>Queries haproxy to see how many requests are queued for a given application\nand how many requests are …\n"],["get_secret","HelperFunctions","HelperFunctions.html#method-c-get_secret","(filename=\"/etc/appscale/secret.key\")",""],["get_server_ports","PbServer","PbServer.html#method-c-get_server_ports","(table)","<p>Returns a list of ports that should be used to host PBServers.\n"],["get_shadow","Djinn","Djinn.html#method-i-get_shadow","()",""],["get_stats","AppControllerClient","AppControllerClient.html#method-i-get_stats","(ok_to_fail=false)",""],["get_stats","Djinn","Djinn.html#method-i-get_stats","(secret)",""],["get_status","AppControllerClient","AppControllerClient.html#method-i-get_status","(ok_to_fail=false)",""],["get_status","Djinn","Djinn.html#method-i-get_status","(node)",""],["get_tar","UserAppClient","UserAppClient.html#method-i-get_tar","(appname, retry_on_except=true)",""],["get_untar_dir","HelperFunctions","HelperFunctions.html#method-c-get_untar_dir","(app_name)","<p>The directory where the applications tarball will be extracted to\n"],["get_usage","HelperFunctions","HelperFunctions.html#method-c-get_usage","()",""],["get_user_data","UserAppClient","UserAppClient.html#method-i-get_user_data","(username, retry_on_except=true)",""],["get_userappserver_ip","AppControllerClient","AppControllerClient.html#method-i-get_userappserver_ip","(verbose_level=\"low\")",""],["got_all_data","Djinn","Djinn.html#method-i-got_all_data","()",""],["init","Repo","Repo.html#method-c-init","(public_ip, private_ip, secret)",""],["init","ZKInterface","ZKInterface.html#method-c-init","(my_node, all_nodes)","<p>Initializes a new ZooKeeper connection to the “closest” node in the\nsystem. “Closeness” …\n"],["init_to_ip","ZKInterface","ZKInterface.html#method-c-init_to_ip","(client_ip, ip)","<p>Initializes a new ZooKeeper connection to the IP address specified. Callers\nshould use this when they …\n"],["initialize_config","Collectd","Collectd.html#method-c-initialize_config","(my_ip, head_node_ip)","<p>Set up the folder structure and creates the configuration files necessary\nfor collectd\n"],["initialize_config","HAProxy","HAProxy.html#method-c-initialize_config","()","<p>Set up the folder structure and creates the configuration files necessary\nfor haproxy\n"],["initialize_config","Nginx","Nginx.html#method-c-initialize_config","()","<p>Set up the folder structure and creates the configuration files necessary\nfor nginx\n"],["initialize_node","Djinn","Djinn.html#method-i-initialize_node","(node)",""],["initialize_nodes_in_parallel","Djinn","Djinn.html#method-i-initialize_nodes_in_parallel","(node_info)",""],["initialize_scaling_info_for_app","Djinn","Djinn.html#method-i-initialize_scaling_info_for_app","(app_name)","<p>Sets up information about the request rate and number of requests in\nhaproxy’s queue for the given application. …\n"],["initialize_server","Djinn","Djinn.html#method-i-initialize_server","()","<p>Perform any necessary initialization steps before we begin starting up\nservices\n"],["is_app_running","Djinn","Djinn.html#method-i-is_app_running","(appname, secret)",""],["is_app_uploaded?","UserAppClient","UserAppClient.html#method-i-is_app_uploaded-3F","(appname)","<p>This method sees if the given app is already uploaded in the system.\nTODO(cgb): compare this with is_app_enabled …\n"],["is_cloud?","Djinn","Djinn.html#method-i-is_cloud-3F","()",""],["is_cpu_or_mem_maxed_out?","Djinn","Djinn.html#method-i-is_cpu_or_mem_maxed_out-3F","(language)","<p>Looks at how much CPU and memory is being used system-wide, to determine if\na new AppServer should be …\n"],["is_done_initializing","Djinn","Djinn.html#method-i-is_done_initializing","(secret)","<p>A SOAP-exposed method that callers can use to determine if this node has\nreceived information from another …\n"],["is_done_initializing?","AppControllerClient","AppControllerClient.html#method-i-is_done_initializing-3F","()",""],["is_done_loading","Djinn","Djinn.html#method-i-is_done_loading","(secret)","<p>A SOAP-exposed method that callers use to determine if this node has\nfinished starting all the roles …\n"],["is_done_loading?","AppControllerClient","AppControllerClient.html#method-i-is_done_loading-3F","()",""],["is_hybrid_cloud?","Djinn","Djinn.html#method-i-is_hybrid_cloud-3F","()",""],["is_node_done_loading?","ZKInterface","ZKInterface.html#method-c-is_node_done_loading-3F","(ip)","<p>Checks ZooKeeper to see if the given node has finished loading its roles,\nwhich it indicates via a file …\n"],["is_node_live?","ZKInterface","ZKInterface.html#method-c-is_node_live-3F","(ip)","<p>Checks ZooKeeper to see if the given node is alive, by checking if the\nephemeral file it has created …\n"],["is_port_open?","HelperFunctions","HelperFunctions.html#method-c-is_port_open-3F","(ip, port, use_ssl=DONT_USE_SSL)",""],["is_running","BlobServer","BlobServer.html#method-c-is_running","(my_ip)",""],["is_running","PbServer","PbServer.html#method-c-is_running","(my_ip)",""],["is_running?","Djinn","Djinn.html#method-i-is_running-3F","(name)",""],["is_running?","HAProxy","HAProxy.html#method-c-is_running-3F","()",""],["is_running?","Nginx","Nginx.html#method-c-is_running-3F","()",""],["is_user_cloud_admin?","UserAppClient","UserAppClient.html#method-i-is_user_cloud_admin-3F","(user, retry_on_except=true)",""],["job","DjinnServer","DjinnServer.html#method-i-job","()",""],["job_start","Djinn","Djinn.html#method-i-job_start","(secret)",""],["kill","Djinn","Djinn.html#method-i-kill","(secret)",""],["kill_process","HelperFunctions","HelperFunctions.html#method-c-kill_process","(name)",""],["listen_port","LoadBalancer","LoadBalancer.html#method-c-listen_port","()",""],["listen_port","Monitoring","Monitoring.html#method-c-listen_port","()",""],["listen_ssl_port","LoadBalancer","LoadBalancer.html#method-c-listen_ssl_port","()",""],["load_neptune_info","Djinn","Djinn.html#method-i-load_neptune_info","(file_to_load=NEPTUNE_INFO)","<p>Loads Neptune data (stored in JSON format) into the instance variable\n@neptune_info. Used to restore …\n"],["local_ip","HelperFunctions","HelperFunctions.html#method-c-local_ip","()",""],["lock_and_run","ZKInterface","ZKInterface.html#method-c-lock_and_run","(&block)","<p>This method provides callers with an easier way to read and write to\nAppController data in ZooKeeper …\n"],["log_debug","Djinn","Djinn.html#method-c-log_debug","(msg)","<p>This method is the nexus of all AppController logging - all messages get\nsent to stdout immediately (which …\n"],["log_obscured_env","HelperFunctions","HelperFunctions.html#method-c-log_obscured_env","()",""],["log_run","Djinn","Djinn.html#method-c-log_run","(command)","<p>Logs and runs the given command, which is assumed to be trusted and thus\nneeds no filtering on our part. …\n"],["log_to_buffer","Djinn","Djinn.html#method-c-log_to_buffer","(time, msg)","<p>Logs and timestamps the given message to a log queue, for later processing\nvia the Sisyphus web app. …\n"],["log_to_stdout","Djinn","Djinn.html#method-c-log_to_stdout","(time, msg)","<p>Logs and timestamps the given message to standard out. TODO(cgb): Examine\nthe performance impact of flushing …\n"],["make_call","AppControllerClient","AppControllerClient.html#method-i-make_call","(time, retry_on_except, callr, ok_to_fail=false)","<p>A helper method that makes SOAP calls for us. This method is mainly here to\nreduce code duplication: …\n"],["make_call","InfrastructureManagerClient","InfrastructureManagerClient.html#method-i-make_call","(time, retry_on_except, callr, ok_to_fail=false)","<p>A helper method that makes SOAP calls for us. This method is mainly here to\nreduce code duplication: …\n"],["make_call","UserAppClient","UserAppClient.html#method-i-make_call","(timeout, retry_on_except)",""],["method_missing","DjinnJobData","DjinnJobData.html#method-i-method_missing","(id, *args, &block)","<p>method_missing: will intercept calls to is_load_balancer?, is_appengine?\nand so on, without having all …\n"],["my_node","Djinn","Djinn.html#method-i-my_node","()",""],["name","BlobServer","BlobServer.html#method-c-name","()",""],["name","LoadBalancer","LoadBalancer.html#method-c-name","()",""],["name","Monitoring","Monitoring.html#method-c-name","()",""],["neptune_parse_creds","Djinn","Djinn.html#method-c-neptune_parse_creds","(storage, job_data)",""],["new","AppControllerClient","AppControllerClient.html#method-c-new","(ip, secret)","<p>A constructor that requires both the IP address of the machine to\ncommunicate with as well as the secret …\n"],["new","Djinn","Djinn.html#method-c-new","()","<p>Creates a new Djinn, which holds all the information needed to configure\nand deploy all the services …\n"],["new","DjinnJobData","DjinnJobData.html#method-c-new","(roles, keyname)",""],["new","InfrastructureManagerClient","InfrastructureManagerClient.html#method-c-new","(secret)",""],["new","UserAppClient","UserAppClient.html#method-c-new","(ip, secret)",""],["obscure_array","HelperFunctions","HelperFunctions.html#method-c-obscure_array","(array)",""],["obscure_creds","HelperFunctions","HelperFunctions.html#method-c-obscure_creds","(creds)",""],["obscure_string","HelperFunctions","HelperFunctions.html#method-c-obscure_string","(string)",""],["on_init","DjinnServer","DjinnServer.html#method-i-on_init","()",""],["parse_creds","Djinn","Djinn.html#method-i-parse_creds","()",""],["parse_static_data","HelperFunctions","HelperFunctions.html#method-c-parse_static_data","(app_name)",""],["perform_scaling_for_appservers","Djinn","Djinn.html#method-i-perform_scaling_for_appservers","()","<p>Adds or removes AppServers within a node based on the number of requests\nthat each application has received …\n"],["post_logs_to_sisyphus","Djinn","Djinn.html#method-i-post_logs_to_sisyphus","(host, logs_to_push)",""],["proxy_port","LoadBalancer","LoadBalancer.html#method-c-proxy_port","()",""],["proxy_port","Monitoring","Monitoring.html#method-c-proxy_port","()",""],["public_directory","LoadBalancer","LoadBalancer.html#method-c-public_directory","()",""],["public_directory","Monitoring","Monitoring.html#method-c-public_directory","()",""],["read_file","HelperFunctions","HelperFunctions.html#method-c-read_file","(location, chomp=true)",""],["read_json_file","HelperFunctions","HelperFunctions.html#method-c-read_json_file","(location)","<p>Reads the given file, which is assumed to be a JSON-loadable object, and\nreturns that JSON back to the …\n"],["regenerate_config","HAProxy","HAProxy.html#method-c-regenerate_config","()","<p>Generates a load balancer configuration file. Since haproxy doesn’t\nprovide an file include option we …\n"],["reinitialize","ZKInterface","ZKInterface.html#method-c-reinitialize","()","<p>Creates a new connection to use with ZooKeeper. Useful for scenarios where\nthe ZooKeeper library has …\n"],["release_appcontroller_lock","ZKInterface","ZKInterface.html#method-c-release_appcontroller_lock","()","<p>Releases the lock that AppControllers use to have exclusive write access,\nwhich was acquired via self.get_appcontroller_lock …\n"],["reload","HAProxy","HAProxy.html#method-c-reload","()",""],["reload","Nginx","Nginx.html#method-c-reload","()",""],["reload_nginx","Nginx","Nginx.html#method-c-reload_nginx","(config_path, app_name)",""],["remove","GodInterface","GodInterface.html#method-c-remove","(watch, remote_ip=nil, remote_key=nil)",""],["remove_app","Collectd","Collectd.html#method-c-remove_app","(app_name)",""],["remove_app","HAProxy","HAProxy.html#method-c-remove_app","(app_name)",""],["remove_app","Nginx","Nginx.html#method-c-remove_app","(app_name)",""],["remove_app_entry","ZKInterface","ZKInterface.html#method-c-remove_app_entry","(appname)",""],["remove_appserver_process","Djinn","Djinn.html#method-i-remove_appserver_process","(app)","<p>Terminates a random AppServer that hosts the specified App Engine app.\n"],["remove_ip_from_ip_list","ZKInterface","ZKInterface.html#method-c-remove_ip_from_ip_list","(ip)","<p>Accesses the list of IP addresses stored in ZooKeeper and removes the given\nIP address from that list. …\n"],["remove_node_from_local_and_zookeeper","Djinn","Djinn.html#method-i-remove_node_from_local_and_zookeeper","(ip)","<p>Removes information associated with the given IP address from our local\ncache (@nodes) as well as the …\n"],["remove_node_information","ZKInterface","ZKInterface.html#method-c-remove_node_information","(ip)","<p>Deletes all information for a given node, whose data is stored in\nZooKeeper.\n"],["remove_role","AppControllerClient","AppControllerClient.html#method-i-remove_role","(role)","<p>CGB - removed timeout here - removing cassandra slave requires it to port\nthe data it owns to somebody …\n"],["remove_role","Djinn","Djinn.html#method-i-remove_role","(old_role, secret)",""],["remove_roles","DjinnJobData","DjinnJobData.html#method-i-remove_roles","(roles)",""],["remove_roles_from_node","ZKInterface","ZKInterface.html#method-c-remove_roles_from_node","(roles, node)","<p>Removes the specified roles from the given node in ZooKeeper. A node can \ncall this function to remove …\n"],["reset","Monitoring","Monitoring.html#method-c-reset","()","<p>Clear out the entire database so no old meta-data is left over\n"],["restart","BlobServer","BlobServer.html#method-c-restart","(my_ip, db_port)",""],["restart","Collectd","Collectd.html#method-c-restart","()",""],["restart","HAProxy","HAProxy.html#method-c-restart","()",""],["restart","LoadBalancer","LoadBalancer.html#method-c-restart","()",""],["restart","Monitoring","Monitoring.html#method-c-restart","()",""],["restart","Nginx","Nginx.html#method-c-restart","()",""],["restart","PbServer","PbServer.html#method-c-restart","(master_ip, my_ip, table, zklocations)","<p>Restarts the Protocol Buffer Server on this machine by doing a hard stop\n(killing it) and starting it. …\n"],["restore_appcontroller_state","Djinn","Djinn.html#method-i-restore_appcontroller_state","()","<p>Restores the state of each of the instance variables that the AppController\nholds by pulling it from …\n"],["restore_db_state_if_needed","Djinn","Djinn.html#method-i-restore_db_state_if_needed","(dest_node)",""],["restore_from_db?","Djinn","Djinn.html#method-i-restore_from_db-3F","()",""],["rsync_files","Djinn","Djinn.html#method-i-rsync_files","(dest_node)",""],["run_app","HelperFunctions","HelperFunctions.html#method-c-run_app","(app_name, port, db_location, public_ip, private_ip, app_version, app_language, nginx_port, xmpp_ip)","<p>Returns pid if successful, -1 if not\n"],["run_instances","InfrastructureManagerClient","InfrastructureManagerClient.html#method-i-run_instances","(parameters)",""],["run_neptune_in_cloud?","Djinn","Djinn.html#method-i-run_neptune_in_cloud-3F","(neptune_info)","<p>TODO: add neptune file, which will have this function\n"],["run_neptune_job","AppControllerClient","AppControllerClient.html#method-i-run_neptune_job","(nodes, job_data)",""],["run_remote_command","HelperFunctions","HelperFunctions.html#method-c-run_remote_command","(ip, command, public_key_loc, want_output)",""],["sanitize_credentials","Djinn","Djinn.html#method-i-sanitize_credentials","()",""],["scale_appservers","Djinn","Djinn.html#method-i-scale_appservers","()","<p>This method guards access to perform_scaling_for_appservers so that only \none thread call it at a time. …\n"],["scp_file","HelperFunctions","HelperFunctions.html#method-c-scp_file","(local_file_loc, remote_file_loc, target_ip, private_key_loc)",""],["send_logs_to_sisyphus","Djinn","Djinn.html#method-i-send_logs_to_sisyphus","()","<p>This method empties the logs buffer that this AppController has accumulated\nand pushes the logs to Sisyphus …\n"],["serialize","DjinnJobData","DjinnJobData.html#method-i-serialize","()","<p>not the best name for this but basically correct\n"],["server_config","HAProxy","HAProxy.html#method-c-server_config","(app_name, index, ip, port)","<p>Generate the server configuration line for the provided inputs\n"],["server_ports","BlobServer","BlobServer.html#method-c-server_ports","()",""],["server_ports","LoadBalancer","LoadBalancer.html#method-c-server_ports","()",""],["server_ports","Monitoring","Monitoring.html#method-c-server_ports","()",""],["set_apps","AppControllerClient","AppControllerClient.html#method-i-set_apps","(app_names)",""],["set_apps","Djinn","Djinn.html#method-i-set_apps","(app_names, secret)","<p>Validates and sets the list of applications that should be loaded on this\nnode.\n"],["set_creds_in_env","HelperFunctions","HelperFunctions.html#method-c-set_creds_in_env","(creds, cloud_num)",""],["set_done_loading","ZKInterface","ZKInterface.html#method-c-set_done_loading","(ip, val)","<p>Provides a convenience function that callers can use to indicate that their\nnode is done loading (if …\n"],["set_job_data_for_ip","ZKInterface","ZKInterface.html#method-c-set_job_data_for_ip","(ip, job_data)",""],["set_live_node_ephemeral_link","ZKInterface","ZKInterface.html#method-c-set_live_node_ephemeral_link","(ip)","<p>Writes the ephemeral link in ZooKeeper that represents a given node being\nalive. Callers should only …\n"],["set_max_machines_for_babel_slaves","ZKInterface","ZKInterface.html#method-c-set_max_machines_for_babel_slaves","(maximum)","<p>Writes the integer corresponding to the maximum number of nodes that should\nbe acquired (whether they …\n"],["set_parameters","AppControllerClient","AppControllerClient.html#method-i-set_parameters","(locations, creds, apps_to_start)",""],["set_parameters","Djinn","Djinn.html#method-i-set_parameters","(djinn_locations, database_credentials, app_names, secret)","<p>Validates and sets the instance variables that Djinn needs before it can\nbegin configuring and deploying …\n"],["set_roles","DjinnJobData","DjinnJobData.html#method-i-set_roles","(roles)",""],["set_time_info","DjinnJobData","DjinnJobData.html#method-i-set_time_info","(creation_time, destruction_time)",""],["set_uaserver_ips","Djinn","Djinn.html#method-i-set_uaserver_ips","()",""],["setup_app","HelperFunctions","HelperFunctions.html#method-c-setup_app","(app_name, untar=true)",""],["setup_config_files","Djinn","Djinn.html#method-i-setup_config_files","()",""],["setup_hadoop_config_org","Djinn","Djinn.html#method-i-setup_hadoop_config_org","(source_dir, dest_dir, master_ip, slave_ips, n)","<p>TODO: this function should use hadoop_helper\n"],["shell","HelperFunctions","HelperFunctions.html#method-c-shell","(cmd)",""],["shorten_to_n_items","HelperFunctions","HelperFunctions.html#method-c-shorten_to_n_items","(n, array)",""],["should_destroy?","DjinnJobData","DjinnJobData.html#method-i-should_destroy-3F","()",""],["should_extend?","DjinnJobData","DjinnJobData.html#method-i-should_extend-3F","()",""],["shutdown","GodInterface","GodInterface.html#method-c-shutdown","(remote_ip=nil, remote_key=nil)",""],["sleep_until_port_is_closed","HelperFunctions","HelperFunctions.html#method-c-sleep_until_port_is_closed","(ip, port, use_ssl=DONT_USE_SSL)",""],["sleep_until_port_is_open","HelperFunctions","HelperFunctions.html#method-c-sleep_until_port_is_open","(ip, port, use_ssl=DONT_USE_SSL)",""],["spawn_and_setup_appengine","Djinn","Djinn.html#method-i-spawn_and_setup_appengine","()",""],["spawn_appengine","Djinn","Djinn.html#method-i-spawn_appengine","(nodes)",""],["spawn_hybrid_vms","HelperFunctions","HelperFunctions.html#method-c-spawn_hybrid_vms","(creds, nodes)",""],["spawn_vms","HelperFunctions","HelperFunctions.html#method-c-spawn_vms","(num_of_vms_to_spawn, job, image_id, instance_type, keyname, infrastructure, cloud, group, spot=false)",""],["spawn_vms","InfrastructureManagerClient","InfrastructureManagerClient.html#method-i-spawn_vms","(num_vms, creds, job, cloud)",""],["start","BlobServer","BlobServer.html#method-c-start","(db_local_ip, db_local_port, public_ip)",""],["start","Ejabberd","Ejabberd.html#method-c-start","()",""],["start","GodInterface","GodInterface.html#method-c-start","(watch, start_cmd, stop_cmd, ports, env_vars=nil, remote_ip=nil, remote_key=nil)",""],["start","LoadBalancer","LoadBalancer.html#method-c-start","()",""],["start","Monitoring","Monitoring.html#method-c-start","()",""],["start","Nginx","Nginx.html#method-c-start","()",""],["start","PbServer","PbServer.html#method-c-start","(master_ip, db_local_ip, my_ip, table, zklocations)","<p>Starts a Protocol Buffer Server on this machine. We don’t want to monitor\nit ourselves, so just tell …\n"],["start","Repo","Repo.html#method-c-start","(login_ip, uaserver_ip)","<p>Starts the Repo application. Since it’s a Google App Engine app, we throw\nup all the usual services for …\n"],["start_appcontroller","Djinn","Djinn.html#method-i-start_appcontroller","(node)",""],["start_appengine","Djinn","Djinn.html#method-i-start_appengine","()",""],["start_blobstore_server","Djinn","Djinn.html#method-i-start_blobstore_server","()",""],["start_ejabberd","Djinn","Djinn.html#method-i-start_ejabberd","()",""],["start_god","GodInterface","GodInterface.html#method-c-start_god","(remote_ip, remote_key)",""],["start_hadoop_org","Djinn","Djinn.html#method-i-start_hadoop_org","()","<p>TODO: this function should use hadoop_helper\n"],["start_infrastructure_manager","Djinn","Djinn.html#method-i-start_infrastructure_manager","()","<p>Starts the InfrastructureManager service on this machine, which exposes a\nSOAP interface by which we …\n"],["start_load_balancer","Djinn","Djinn.html#method-i-start_load_balancer","()",""],["start_master","RabbitMQ","RabbitMQ.html#method-c-start_master","()","<p>Starts a service that we refer to as a “rabbitmq_master”, a RabbitMQ\nservice that other nodes …\n"],["start_memcache","Djinn","Djinn.html#method-i-start_memcache","()",""],["start_neptune_manager","Djinn","Djinn.html#method-i-start_neptune_manager","()","<p>Starts the NeptuneManager service on this machine, which exposes a SOAP\ninterface by which we can run …\n"],["start_new_roles_on_nodes","Djinn","Djinn.html#method-i-start_new_roles_on_nodes","(nodes_needed, instance_type, secret)","<p>Starts the given roles by using open nodes, spawning new nodes, or some\ncombination of the two. ‘nodes_needed …\n"],["start_open","Djinn","Djinn.html#method-i-start_open","()",""],["start_pbserver","Djinn","Djinn.html#method-i-start_pbserver","()",""],["start_rabbitmq_master","Djinn","Djinn.html#method-i-start_rabbitmq_master","()",""],["start_rabbitmq_slave","Djinn","Djinn.html#method-i-start_rabbitmq_slave","()",""],["start_shadow","Djinn","Djinn.html#method-i-start_shadow","()",""],["start_sisyphus","Djinn","Djinn.html#method-i-start_sisyphus","()",""],["start_slave","RabbitMQ","RabbitMQ.html#method-c-start_slave","(master_ip)","<p>Starts a service that we refer to as a “rabbitmq slave”. Since all\nnodes in RabbitMQ are equal, …\n"],["start_soap_server","Djinn","Djinn.html#method-i-start_soap_server","()",""],["start_xmpp_for_app","Djinn","Djinn.html#method-i-start_xmpp_for_app","(app, app_language)",""],["status","AppControllerClient","AppControllerClient.html#method-i-status","(print_output=true)",""],["status","Djinn","Djinn.html#method-i-status","(secret)",""],["stop","BlobServer","BlobServer.html#method-c-stop","()",""],["stop","Collectd","Collectd.html#method-c-stop","()",""],["stop","Ejabberd","Ejabberd.html#method-c-stop","()",""],["stop","GodInterface","GodInterface.html#method-c-stop","(watch, remote_ip=nil, remote_key=nil)",""],["stop","HAProxy","HAProxy.html#method-c-stop","()",""],["stop","LoadBalancer","LoadBalancer.html#method-c-stop","()",""],["stop","Monitoring","Monitoring.html#method-c-stop","()",""],["stop","Nginx","Nginx.html#method-c-stop","()",""],["stop","PbServer","PbServer.html#method-c-stop","(table)","<p>Stops the Protocol Buffer Server running on this machine. Since it’s\nmanaged by god, just tell god to …\n"],["stop","RabbitMQ","RabbitMQ.html#method-c-stop","()","<p>Stops the RabbitMQ server on this node. TODO(cgb): It doesn’t actually do\nanything right now - find out …\n"],["stop","Repo","Repo.html#method-c-stop","()","<p>Stops the Repo app. TODO(cgb): This kills all AppServers, which definitely\nis not the correct thing to …\n"],["stop_app","AppControllerClient","AppControllerClient.html#method-i-stop_app","(app_name)",""],["stop_app","Djinn","Djinn.html#method-i-stop_app","(app_name, secret)",""],["stop_app","HelperFunctions","HelperFunctions.html#method-c-stop_app","(app_name, port)","<p>Instructs god to terminate and stop watching an App Engine application, \nidentified by its name and the …\n"],["stop_appengine","Djinn","Djinn.html#method-i-stop_appengine","()",""],["stop_blob_server","Djinn","Djinn.html#method-i-stop_blob_server","()",""],["stop_ejabberd","Djinn","Djinn.html#method-i-stop_ejabberd","()",""],["stop_infrastructure_manager","Djinn","Djinn.html#method-i-stop_infrastructure_manager","()",""],["stop_load_balancer","Djinn","Djinn.html#method-i-stop_load_balancer","()",""],["stop_memcache","Djinn","Djinn.html#method-i-stop_memcache","()",""],["stop_neptune_manager","Djinn","Djinn.html#method-i-stop_neptune_manager","()",""],["stop_open","Djinn","Djinn.html#method-i-stop_open","()",""],["stop_pbserver","Djinn","Djinn.html#method-i-stop_pbserver","()",""],["stop_shadow","Djinn","Djinn.html#method-i-stop_shadow","()",""],["stop_sisyphus","Djinn","Djinn.html#method-i-stop_sisyphus","()",""],["stop_soap_server","Djinn","Djinn.html#method-i-stop_soap_server","()",""],["terminate_all_vms","HelperFunctions","HelperFunctions.html#method-c-terminate_all_vms","(infrastructure, keyname)",""],["terminate_hybrid_vms","HelperFunctions","HelperFunctions.html#method-c-terminate_hybrid_vms","(creds)",""],["terminate_instances","InfrastructureManagerClient","InfrastructureManagerClient.html#method-i-terminate_instances","(parameters)",""],["terminate_vms","HelperFunctions","HelperFunctions.html#method-c-terminate_vms","(nodes, infrastructure)",""],["to_hash","DjinnJobData","DjinnJobData.html#method-i-to_hash","()","<p>Produces a Hash that contains all the information contained in this object.\n"],["to_s","DjinnJobData","DjinnJobData.html#method-i-to_s","()",""],["try_to_scale_down","Djinn","Djinn.html#method-i-try_to_scale_down","(app_name)",""],["try_to_scale_up","Djinn","Djinn.html#method-i-try_to_scale_up","(app_name)",""],["update","AppControllerClient","AppControllerClient.html#method-i-update","(app_names)",""],["update","Djinn","Djinn.html#method-i-update","(app_names, secret)",""],["update_api_status","Djinn","Djinn.html#method-i-update_api_status","()",""],["update_app_config","HAProxy","HAProxy.html#method-c-update_app_config","(app_name, app_number, ports, public_ip)","<p>Updates the HAProxy config file for this App Engine application to point to\nall the ports currently the …\n"],["update_cron","CronHelper","CronHelper.html#method-c-update_cron","(ip, lang, app)",""],["update_ips_timestamp","ZKInterface","ZKInterface.html#method-c-update_ips_timestamp","()","<p>Updates the timestamp in the IP_LIST file, to let other nodes know that an\nupdate has been made and that …\n"],["update_local_nodes","Djinn","Djinn.html#method-i-update_local_nodes","()","<p>Queries ZooKeeper to see if our local copy of @nodes is out of date and\nshould be regenerated with up …\n"],["valid_format_for_credentials","Djinn","Djinn.html#method-i-valid_format_for_credentials","(possible_credentials)","<p>Checks to see if the credentials given to us (a Hash) have all the keys\nthat other methods expect to …\n"],["valid_secret?","Djinn","Djinn.html#method-i-valid_secret-3F","(secret)",""],["validate_image","Djinn","Djinn.html#method-i-validate_image","(node)",""],["wait_for_data","Djinn","Djinn.html#method-i-wait_for_data","()",""],["wait_for_node_to_be","AppControllerClient","AppControllerClient.html#method-i-wait_for_node_to_be","(new_roles)",""],["wait_for_nodes_to_finish_loading","Djinn","Djinn.html#method-i-wait_for_nodes_to_finish_loading","(nodes)",""],["write_app_config","Collectd","Collectd.html#method-c-write_app_config","(app_name)","<p>Creates a config file for the provided app name\n"],["write_app_config","HAProxy","HAProxy.html#method-c-write_app_config","(app_name, app_number, num_of_servers, ip)",""],["write_app_config","Nginx","Nginx.html#method-c-write_app_config","(app_name, app_number, my_public_ip, proxy_port, static_handlers, login_ip)","<p>Creates a Nginx config file for the provided app name\n"],["write_appcontroller_state","ZKInterface","ZKInterface.html#method-c-write_appcontroller_state","(state)",""],["write_auth_script","Ejabberd","Ejabberd.html#method-c-write_auth_script","(login_ip, secret)",""],["write_cloud_info","Djinn","Djinn.html#method-i-write_cloud_info","()",""],["write_config_file","Ejabberd","Ejabberd.html#method-c-write_config_file","(my_public_ip)",""],["write_cookie","RabbitMQ","RabbitMQ.html#method-c-write_cookie","()","<p>Erlang processes use a secret value as a password to authenticate between\none another. Since this is …\n"],["write_database_info","Djinn","Djinn.html#method-i-write_database_info","()",""],["write_file","HelperFunctions","HelperFunctions.html#method-c-write_file","(location, contents)",""],["write_fullproxy_app_config","Nginx","Nginx.html#method-c-write_fullproxy_app_config","(app_name, app_number, my_public_ip, my_private_ip, proxy_port, login_ip, appengine_server_ips)","<p>Creates a Nginx config file for the provided app name on the load balancer\n"],["write_hypersoap","Djinn","Djinn.html#method-i-write_hypersoap","()",""],["write_json_file","HelperFunctions","HelperFunctions.html#method-c-write_json_file","(location, contents)",""],["write_neptune_info","Djinn","Djinn.html#method-i-write_neptune_info","(file_to_write=NEPTUNE_INFO)","<p>Dumps all the info about Neptune jobs that have executed into a file, that\ncan be recovered later via …\n"],["write_node_information","ZKInterface","ZKInterface.html#method-c-write_node_information","(node, done_loading)","<p>Creates files in ZooKeeper that relate to a given AppController’s role\ninformation, so that other AppControllers …\n"],["write_online_users_list","Ejabberd","Ejabberd.html#method-c-write_online_users_list","(nodes)",""],["write_our_node_info","Djinn","Djinn.html#method-i-write_our_node_info","()","<p>Backs up information about what this node is doing (roles, apps it is\nrunning) to ZooKeeper, for later …\n"],["write_zookeeper_locations","Djinn","Djinn.html#method-i-write_zookeeper_locations","()","<p>Updates the file that says where all the ZooKeeper nodes are located so\nthat this node has the most up-to-date …\n"]]}}